// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: MessageType.proto
// Protobuf C++ Version: 5.29.3

#ifndef MessageType_2eproto_2epb_2eh
#define MessageType_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MessageType_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageType_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MessageType_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf {
enum GameState : int {
  NULL_GAME_STATE = 0,
  GAME_START = 1,
  GAME_RUNNING = 2,
  GAME_END = 3,
  GameState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameState_IsValid(int value);
extern const uint32_t GameState_internal_data_[];
constexpr GameState GameState_MIN = static_cast<GameState>(0);
constexpr GameState GameState_MAX = static_cast<GameState>(3);
constexpr int GameState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GameState_descriptor();
template <typename T>
const std::string& GameState_Name(T value) {
  static_assert(std::is_same<T, GameState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameState_Name().");
  return GameState_Name(static_cast<GameState>(value));
}
template <>
inline const std::string& GameState_Name(GameState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GameState_Parse(absl::string_view name, GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState>(
      GameState_descriptor(), name, value);
}
enum PlaceType : int {
  NULL_PLACE_TYPE = 0,
  HOME = 1,
  SPACE = 2,
  BARRIER = 3,
  BUSH = 4,
  ECONOMY_RESOURCE = 5,
  ADDITION_RESOURCE = 6,
  CONSTRUCTION = 7,
  TRAP = 8,
  PlaceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PlaceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PlaceType_IsValid(int value);
extern const uint32_t PlaceType_internal_data_[];
constexpr PlaceType PlaceType_MIN = static_cast<PlaceType>(0);
constexpr PlaceType PlaceType_MAX = static_cast<PlaceType>(8);
constexpr int PlaceType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
PlaceType_descriptor();
template <typename T>
const std::string& PlaceType_Name(T value) {
  static_assert(std::is_same<T, PlaceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlaceType_Name().");
  return PlaceType_Name(static_cast<PlaceType>(value));
}
template <>
inline const std::string& PlaceType_Name(PlaceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PlaceType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool PlaceType_Parse(absl::string_view name, PlaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlaceType>(
      PlaceType_descriptor(), name, value);
}
enum ShapeType : int {
  NULL_SHAPE_TYPE = 0,
  CIRCLE = 1,
  SQUARE = 2,
  ShapeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ShapeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ShapeType_IsValid(int value);
extern const uint32_t ShapeType_internal_data_[];
constexpr ShapeType ShapeType_MIN = static_cast<ShapeType>(0);
constexpr ShapeType ShapeType_MAX = static_cast<ShapeType>(2);
constexpr int ShapeType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ShapeType_descriptor();
template <typename T>
const std::string& ShapeType_Name(T value) {
  static_assert(std::is_same<T, ShapeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ShapeType_Name().");
  return ShapeType_Name(static_cast<ShapeType>(value));
}
template <>
inline const std::string& ShapeType_Name(ShapeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ShapeType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ShapeType_Parse(absl::string_view name, ShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShapeType>(
      ShapeType_descriptor(), name, value);
}
enum PlayerType : int {
  NULL_PLAYER_TYPE = 0,
  CHARACTER = 1,
  TEAM = 2,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PlayerType_IsValid(int value);
extern const uint32_t PlayerType_internal_data_[];
constexpr PlayerType PlayerType_MIN = static_cast<PlayerType>(0);
constexpr PlayerType PlayerType_MAX = static_cast<PlayerType>(2);
constexpr int PlayerType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PlayerType_descriptor();
template <typename T>
const std::string& PlayerType_Name(T value) {
  static_assert(std::is_same<T, PlayerType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlayerType_Name().");
  return PlayerType_Name(static_cast<PlayerType>(value));
}
template <>
inline const std::string& PlayerType_Name(PlayerType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PlayerType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PlayerType_Parse(absl::string_view name, PlayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerType>(
      PlayerType_descriptor(), name, value);
}
enum CharacterType : int {
  NULL_CHARACTER_TYPE = 0,
  TangSeng = 1,
  SunWukong = 2,
  ZhuBajie = 3,
  ShaWujing = 4,
  BaiLongma = 5,
  Monkid = 6,
  JiuLing = 7,
  HongHaier = 8,
  NiuMowang = 9,
  TieShan = 10,
  ZhiZhujing = 11,
  Pawn = 12,
  CharacterType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterType_IsValid(int value);
extern const uint32_t CharacterType_internal_data_[];
constexpr CharacterType CharacterType_MIN = static_cast<CharacterType>(0);
constexpr CharacterType CharacterType_MAX = static_cast<CharacterType>(12);
constexpr int CharacterType_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
CharacterType_descriptor();
template <typename T>
const std::string& CharacterType_Name(T value) {
  static_assert(std::is_same<T, CharacterType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterType_Name().");
  return CharacterType_Name(static_cast<CharacterType>(value));
}
template <>
inline const std::string& CharacterType_Name(CharacterType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CharacterType_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool CharacterType_Parse(absl::string_view name, CharacterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterType>(
      CharacterType_descriptor(), name, value);
}
enum CharacterState : int {
  NULL_CHARACTER_STATE = 0,
  IDLE = 1,
  HARVESTING = 2,
  ATTACKING = 3,
  SKILL_CASTING = 4,
  CONSTRUCTING = 5,
  MOVING = 6,
  BLIND = 7,
  KNOCKED_BACK = 8,
  STUNNED = 9,
  INVISIBLE = 10,
  HEALING = 11,
  BERSERK = 12,
  BURNED = 13,
  DECEASED = 14,
  CharacterState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterState_IsValid(int value);
extern const uint32_t CharacterState_internal_data_[];
constexpr CharacterState CharacterState_MIN = static_cast<CharacterState>(0);
constexpr CharacterState CharacterState_MAX = static_cast<CharacterState>(14);
constexpr int CharacterState_ARRAYSIZE = 14 + 1;
const ::google::protobuf::EnumDescriptor*
CharacterState_descriptor();
template <typename T>
const std::string& CharacterState_Name(T value) {
  static_assert(std::is_same<T, CharacterState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterState_Name().");
  return CharacterState_Name(static_cast<CharacterState>(value));
}
template <>
inline const std::string& CharacterState_Name(CharacterState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CharacterState_descriptor,
                                                 0, 14>(
      static_cast<int>(value));
}
inline bool CharacterState_Parse(absl::string_view name, CharacterState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterState>(
      CharacterState_descriptor(), name, value);
}
enum CharacterBuffType : int {
  NULL_CHARACTER_BUFF_TYPE = 0,
  ATTACK_BUFF1 = 1,
  ATTACK_BUFF2 = 2,
  ATTACK_BUFF3 = 3,
  DEFENSE_BUFF = 4,
  SPEED_BUFF = 5,
  VISION_BUFF = 6,
  CharacterBuffType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterBuffType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterBuffType_IsValid(int value);
extern const uint32_t CharacterBuffType_internal_data_[];
constexpr CharacterBuffType CharacterBuffType_MIN = static_cast<CharacterBuffType>(0);
constexpr CharacterBuffType CharacterBuffType_MAX = static_cast<CharacterBuffType>(6);
constexpr int CharacterBuffType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
CharacterBuffType_descriptor();
template <typename T>
const std::string& CharacterBuffType_Name(T value) {
  static_assert(std::is_same<T, CharacterBuffType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterBuffType_Name().");
  return CharacterBuffType_Name(static_cast<CharacterBuffType>(value));
}
template <>
inline const std::string& CharacterBuffType_Name(CharacterBuffType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CharacterBuffType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool CharacterBuffType_Parse(absl::string_view name, CharacterBuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterBuffType>(
      CharacterBuffType_descriptor(), name, value);
}
enum EconomyResourceType : int {
  NULL_ECONOMY_RESOURCE_TYPE = 0,
  SMALL_ECONOMY_RESOURCE = 1,
  MEDIUM_ECONOMY_RESOURCE = 2,
  LARGE_ECONOMY_RESOURCE = 3,
  EconomyResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EconomyResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EconomyResourceType_IsValid(int value);
extern const uint32_t EconomyResourceType_internal_data_[];
constexpr EconomyResourceType EconomyResourceType_MIN = static_cast<EconomyResourceType>(0);
constexpr EconomyResourceType EconomyResourceType_MAX = static_cast<EconomyResourceType>(3);
constexpr int EconomyResourceType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
EconomyResourceType_descriptor();
template <typename T>
const std::string& EconomyResourceType_Name(T value) {
  static_assert(std::is_same<T, EconomyResourceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EconomyResourceType_Name().");
  return EconomyResourceType_Name(static_cast<EconomyResourceType>(value));
}
template <>
inline const std::string& EconomyResourceType_Name(EconomyResourceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EconomyResourceType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EconomyResourceType_Parse(absl::string_view name, EconomyResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EconomyResourceType>(
      EconomyResourceType_descriptor(), name, value);
}
enum AdditionResourceType : int {
  NULL_ADDITION_RESOURCE_TYPE = 0,
  LIFE_POOL1 = 1,
  LIFE_POOL2 = 2,
  LIFE_POOL3 = 3,
  CRAZY_MAN1 = 4,
  CRAZY_MAN2 = 5,
  CRAZY_MAN3 = 6,
  QUICK_STEP = 7,
  WIDE_VIEW = 8,
  AdditionResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AdditionResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AdditionResourceType_IsValid(int value);
extern const uint32_t AdditionResourceType_internal_data_[];
constexpr AdditionResourceType AdditionResourceType_MIN = static_cast<AdditionResourceType>(0);
constexpr AdditionResourceType AdditionResourceType_MAX = static_cast<AdditionResourceType>(8);
constexpr int AdditionResourceType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
AdditionResourceType_descriptor();
template <typename T>
const std::string& AdditionResourceType_Name(T value) {
  static_assert(std::is_same<T, AdditionResourceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AdditionResourceType_Name().");
  return AdditionResourceType_Name(static_cast<AdditionResourceType>(value));
}
template <>
inline const std::string& AdditionResourceType_Name(AdditionResourceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AdditionResourceType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool AdditionResourceType_Parse(absl::string_view name, AdditionResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdditionResourceType>(
      AdditionResourceType_descriptor(), name, value);
}
enum EconomyResourceState : int {
  NULL_ECONOMY_RESOURCE_STSTE = 0,
  HARVESTABLE = 1,
  BEING_HARVESTED = 2,
  HARVESTED = 3,
  EconomyResourceState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EconomyResourceState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EconomyResourceState_IsValid(int value);
extern const uint32_t EconomyResourceState_internal_data_[];
constexpr EconomyResourceState EconomyResourceState_MIN = static_cast<EconomyResourceState>(0);
constexpr EconomyResourceState EconomyResourceState_MAX = static_cast<EconomyResourceState>(3);
constexpr int EconomyResourceState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
EconomyResourceState_descriptor();
template <typename T>
const std::string& EconomyResourceState_Name(T value) {
  static_assert(std::is_same<T, EconomyResourceState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EconomyResourceState_Name().");
  return EconomyResourceState_Name(static_cast<EconomyResourceState>(value));
}
template <>
inline const std::string& EconomyResourceState_Name(EconomyResourceState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EconomyResourceState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EconomyResourceState_Parse(absl::string_view name, EconomyResourceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EconomyResourceState>(
      EconomyResourceState_descriptor(), name, value);
}
enum AdditionResourceState : int {
  NULL_ADDITION_RESOURCE_STATE = 0,
  BEATABLE = 1,
  BEING_BEATEN = 2,
  BEATEN = 3,
  AdditionResourceState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AdditionResourceState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AdditionResourceState_IsValid(int value);
extern const uint32_t AdditionResourceState_internal_data_[];
constexpr AdditionResourceState AdditionResourceState_MIN = static_cast<AdditionResourceState>(0);
constexpr AdditionResourceState AdditionResourceState_MAX = static_cast<AdditionResourceState>(3);
constexpr int AdditionResourceState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AdditionResourceState_descriptor();
template <typename T>
const std::string& AdditionResourceState_Name(T value) {
  static_assert(std::is_same<T, AdditionResourceState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AdditionResourceState_Name().");
  return AdditionResourceState_Name(static_cast<AdditionResourceState>(value));
}
template <>
inline const std::string& AdditionResourceState_Name(AdditionResourceState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AdditionResourceState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AdditionResourceState_Parse(absl::string_view name, AdditionResourceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdditionResourceState>(
      AdditionResourceState_descriptor(), name, value);
}
enum EquipmentType : int {
  NULL_EQUIPMENT_TYPE = 0,
  SMALL_HEALTH_POTION = 1,
  MEDIUM_HEALTH_POTION = 2,
  LARGE_HEALTH_POTION = 3,
  SMALL_SHIELD = 4,
  MEDIUM_SHIELD = 5,
  LARGE_SHIELD = 6,
  SPEEDBOOTS = 7,
  PURIFICATION_POTION = 8,
  INVISIBILITY_POTION = 9,
  BERSERK_POTION = 10,
  EquipmentType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EquipmentType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EquipmentType_IsValid(int value);
extern const uint32_t EquipmentType_internal_data_[];
constexpr EquipmentType EquipmentType_MIN = static_cast<EquipmentType>(0);
constexpr EquipmentType EquipmentType_MAX = static_cast<EquipmentType>(10);
constexpr int EquipmentType_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
EquipmentType_descriptor();
template <typename T>
const std::string& EquipmentType_Name(T value) {
  static_assert(std::is_same<T, EquipmentType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EquipmentType_Name().");
  return EquipmentType_Name(static_cast<EquipmentType>(value));
}
template <>
inline const std::string& EquipmentType_Name(EquipmentType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EquipmentType_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool EquipmentType_Parse(absl::string_view name, EquipmentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentType>(
      EquipmentType_descriptor(), name, value);
}
enum ConstructionType : int {
  NULL_CONSTRUCTION_TYPE = 0,
  BARRACKS = 1,
  SPRING = 2,
  FARM = 3,
  ConstructionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConstructionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConstructionType_IsValid(int value);
extern const uint32_t ConstructionType_internal_data_[];
constexpr ConstructionType ConstructionType_MIN = static_cast<ConstructionType>(0);
constexpr ConstructionType ConstructionType_MAX = static_cast<ConstructionType>(3);
constexpr int ConstructionType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ConstructionType_descriptor();
template <typename T>
const std::string& ConstructionType_Name(T value) {
  static_assert(std::is_same<T, ConstructionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConstructionType_Name().");
  return ConstructionType_Name(static_cast<ConstructionType>(value));
}
template <>
inline const std::string& ConstructionType_Name(ConstructionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConstructionType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ConstructionType_Parse(absl::string_view name, ConstructionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConstructionType>(
      ConstructionType_descriptor(), name, value);
}
enum TrapType : int {
  NULL_TRAP_TYPE = 0,
  HOLE = 1,
  CAGE = 2,
  TrapType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrapType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrapType_IsValid(int value);
extern const uint32_t TrapType_internal_data_[];
constexpr TrapType TrapType_MIN = static_cast<TrapType>(0);
constexpr TrapType TrapType_MAX = static_cast<TrapType>(2);
constexpr int TrapType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TrapType_descriptor();
template <typename T>
const std::string& TrapType_Name(T value) {
  static_assert(std::is_same<T, TrapType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrapType_Name().");
  return TrapType_Name(static_cast<TrapType>(value));
}
template <>
inline const std::string& TrapType_Name(TrapType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrapType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TrapType_Parse(absl::string_view name, TrapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrapType>(
      TrapType_descriptor(), name, value);
}
enum NewsType : int {
  NULL_NEWS_TYPE = 0,
  TEXT = 1,
  BINARY = 2,
  NewsType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NewsType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NewsType_IsValid(int value);
extern const uint32_t NewsType_internal_data_[];
constexpr NewsType NewsType_MIN = static_cast<NewsType>(0);
constexpr NewsType NewsType_MAX = static_cast<NewsType>(2);
constexpr int NewsType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NewsType_descriptor();
template <typename T>
const std::string& NewsType_Name(T value) {
  static_assert(std::is_same<T, NewsType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NewsType_Name().");
  return NewsType_Name(static_cast<NewsType>(value));
}
template <>
inline const std::string& NewsType_Name(NewsType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NewsType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NewsType_Parse(absl::string_view name, NewsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NewsType>(
      NewsType_descriptor(), name, value);
}
enum PlayerTeam : int {
  NULL_TEAM = 0,
  BUDDHISTS_TEAM = 1,
  MONSTERS_TEAM = 2,
  PlayerTeam_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PlayerTeam_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PlayerTeam_IsValid(int value);
extern const uint32_t PlayerTeam_internal_data_[];
constexpr PlayerTeam PlayerTeam_MIN = static_cast<PlayerTeam>(0);
constexpr PlayerTeam PlayerTeam_MAX = static_cast<PlayerTeam>(2);
constexpr int PlayerTeam_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PlayerTeam_descriptor();
template <typename T>
const std::string& PlayerTeam_Name(T value) {
  static_assert(std::is_same<T, PlayerTeam>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlayerTeam_Name().");
  return PlayerTeam_Name(static_cast<PlayerTeam>(value));
}
template <>
inline const std::string& PlayerTeam_Name(PlayerTeam value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PlayerTeam_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PlayerTeam_Parse(absl::string_view name, PlayerTeam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerTeam>(
      PlayerTeam_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protobuf::GameState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::GameState>() {
  return ::protobuf::GameState_descriptor();
}
template <>
struct is_proto_enum<::protobuf::PlaceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::PlaceType>() {
  return ::protobuf::PlaceType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::ShapeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ShapeType>() {
  return ::protobuf::ShapeType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::PlayerType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::PlayerType>() {
  return ::protobuf::PlayerType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::CharacterType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::CharacterType>() {
  return ::protobuf::CharacterType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::CharacterState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::CharacterState>() {
  return ::protobuf::CharacterState_descriptor();
}
template <>
struct is_proto_enum<::protobuf::CharacterBuffType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::CharacterBuffType>() {
  return ::protobuf::CharacterBuffType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::EconomyResourceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::EconomyResourceType>() {
  return ::protobuf::EconomyResourceType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::AdditionResourceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::AdditionResourceType>() {
  return ::protobuf::AdditionResourceType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::EconomyResourceState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::EconomyResourceState>() {
  return ::protobuf::EconomyResourceState_descriptor();
}
template <>
struct is_proto_enum<::protobuf::AdditionResourceState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::AdditionResourceState>() {
  return ::protobuf::AdditionResourceState_descriptor();
}
template <>
struct is_proto_enum<::protobuf::EquipmentType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::EquipmentType>() {
  return ::protobuf::EquipmentType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::ConstructionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ConstructionType>() {
  return ::protobuf::ConstructionType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::TrapType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::TrapType>() {
  return ::protobuf::TrapType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::NewsType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::NewsType>() {
  return ::protobuf::NewsType_descriptor();
}
template <>
struct is_proto_enum<::protobuf::PlayerTeam> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::PlayerTeam>() {
  return ::protobuf::PlayerTeam_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // MessageType_2eproto_2epb_2eh
