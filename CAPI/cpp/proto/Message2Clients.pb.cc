// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#include "Message2Clients.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf {
PROTOBUF_CONSTEXPR MessageOfMonkeySkill::MessageOfMonkeySkill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfMonkeySkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfMonkeySkillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfMonkeySkillDefaultTypeInternal() {}
  union {
    MessageOfMonkeySkill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMonkeySkillDefaultTypeInternal _MessageOfMonkeySkill_default_instance_;
PROTOBUF_CONSTEXPR MessageOfCharacter::MessageOfCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guid_)*/int64_t{0}
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.character_type_)*/0
  , /*decltype(_impl_.character_active_state_)*/0
  , /*decltype(_impl_.blind_time_)*/int64_t{0}
  , /*decltype(_impl_.stunned_time_)*/int64_t{0}
  , /*decltype(_impl_.is_blind_)*/false
  , /*decltype(_impl_.is_stunned_)*/false
  , /*decltype(_impl_.is_invisible_)*/false
  , /*decltype(_impl_.is_burned_)*/false
  , /*decltype(_impl_.character_passive_state_)*/0
  , /*decltype(_impl_.invisible_time_)*/int64_t{0}
  , /*decltype(_impl_.burned_time_)*/int64_t{0}
  , /*decltype(_impl_.harm_cut_)*/0
  , /*decltype(_impl_.harm_cut_time_)*/int64_t{0}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.facing_direction_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.view_range_)*/0
  , /*decltype(_impl_.common_attack_cd_)*/int64_t{0}
  , /*decltype(_impl_.common_attack_)*/0
  , /*decltype(_impl_.common_attack_range_)*/0
  , /*decltype(_impl_.skill_attack_cd_)*/int64_t{0}
  , /*decltype(_impl_.economy_depletion_)*/0
  , /*decltype(_impl_.kill_score_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.shield_equipment_)*/0
  , /*decltype(_impl_.shoes_time_)*/int64_t{0}
  , /*decltype(_impl_.shoes_equipment_)*/0
  , /*decltype(_impl_.is_purified_)*/false
  , /*decltype(_impl_.is_berserk_)*/false
  , /*decltype(_impl_.purified_time_)*/int64_t{0}
  , /*decltype(_impl_.berserk_time_)*/int64_t{0}
  , /*decltype(_impl_.attack_buff_time_)*/int64_t{0}
  , /*decltype(_impl_.speed_buff_time_)*/int64_t{0}
  , /*decltype(_impl_.vision_buff_time_)*/int64_t{0}
  , /*decltype(_impl_.attack_buff_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfCharacterDefaultTypeInternal() {}
  union {
    MessageOfCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfCharacterDefaultTypeInternal _MessageOfCharacter_default_instance_;
PROTOBUF_CONSTEXPR MessageOfBarracks::MessageOfBarracks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfBarracksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfBarracksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfBarracksDefaultTypeInternal() {}
  union {
    MessageOfBarracks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfBarracksDefaultTypeInternal _MessageOfBarracks_default_instance_;
PROTOBUF_CONSTEXPR MessageOfSpring::MessageOfSpring(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfSpringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfSpringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfSpringDefaultTypeInternal() {}
  union {
    MessageOfSpring _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfSpringDefaultTypeInternal _MessageOfSpring_default_instance_;
PROTOBUF_CONSTEXPR MessageOfFarm::MessageOfFarm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfFarmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfFarmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfFarmDefaultTypeInternal() {}
  union {
    MessageOfFarm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfFarmDefaultTypeInternal _MessageOfFarm_default_instance_;
PROTOBUF_CONSTEXPR MessageOfTrap::MessageOfTrap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trap_type_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfTrapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfTrapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfTrapDefaultTypeInternal() {}
  union {
    MessageOfTrap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfTrapDefaultTypeInternal _MessageOfTrap_default_instance_;
PROTOBUF_CONSTEXPR MessageOfEconomyResource::MessageOfEconomyResource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.economy_resource_type_)*/0
  , /*decltype(_impl_.economy_resource_state_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.process_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfEconomyResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfEconomyResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfEconomyResourceDefaultTypeInternal() {}
  union {
    MessageOfEconomyResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfEconomyResourceDefaultTypeInternal _MessageOfEconomyResource_default_instance_;
PROTOBUF_CONSTEXPR MessageOfAdditionResource::MessageOfAdditionResource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addition_resource_type_)*/0
  , /*decltype(_impl_.addition_resource_state_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfAdditionResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfAdditionResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfAdditionResourceDefaultTypeInternal() {}
  union {
    MessageOfAdditionResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfAdditionResourceDefaultTypeInternal _MessageOfAdditionResource_default_instance_;
PROTOBUF_CONSTEXPR MessageOfConstruction::MessageOfConstruction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.construction_type_)*/0
  , /*decltype(_impl_.construction_state_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfConstructionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfConstructionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfConstructionDefaultTypeInternal() {}
  union {
    MessageOfConstruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfConstructionDefaultTypeInternal _MessageOfConstruction_default_instance_;
PROTOBUF_CONSTEXPR MessageOfMap_Row::MessageOfMap_Row(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cols_)*/{}
  , /*decltype(_impl_._cols_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfMap_RowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfMap_RowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfMap_RowDefaultTypeInternal() {}
  union {
    MessageOfMap_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
PROTOBUF_CONSTEXPR MessageOfMap::MessageOfMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rows_)*/{}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfMapDefaultTypeInternal() {}
  union {
    MessageOfMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
PROTOBUF_CONSTEXPR MessageOfTeam::MessageOfTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.score_)*/int64_t{0}
  , /*decltype(_impl_.energy_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfTeamDefaultTypeInternal() {}
  union {
    MessageOfTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfTeamDefaultTypeInternal _MessageOfTeam_default_instance_;
PROTOBUF_CONSTEXPR MessageOfObj::MessageOfObj(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_of_obj_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageOfObjDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfObjDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfObjDefaultTypeInternal() {}
  union {
    MessageOfObj _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfObjDefaultTypeInternal _MessageOfObj_default_instance_;
PROTOBUF_CONSTEXPR MessageOfAll::MessageOfAll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.buddhists_team_score_)*/0
  , /*decltype(_impl_.monsters_team_score_)*/0
  , /*decltype(_impl_.buddhists_team_economy_)*/0
  , /*decltype(_impl_.monsters_team_economy_)*/0
  , /*decltype(_impl_.buddhists_hero_hp_)*/0
  , /*decltype(_impl_.monsters_hero_hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOfAllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfAllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfAllDefaultTypeInternal() {}
  union {
    MessageOfAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfAllDefaultTypeInternal _MessageOfAll_default_instance_;
PROTOBUF_CONSTEXPR MessageToClient::MessageToClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obj_message_)*/{}
  , /*decltype(_impl_.all_message_)*/nullptr
  , /*decltype(_impl_.game_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageToClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageToClientDefaultTypeInternal() {}
  union {
    MessageToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
PROTOBUF_CONSTEXPR MoveRes::MoveRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actual_speed_)*/int64_t{0}
  , /*decltype(_impl_.actual_angle_)*/0
  , /*decltype(_impl_.act_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveResDefaultTypeInternal() {}
  union {
    MoveRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResDefaultTypeInternal _MoveRes_default_instance_;
PROTOBUF_CONSTEXPR CreatCharacterRes::CreatCharacterRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.act_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatCharacterResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatCharacterResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatCharacterResDefaultTypeInternal() {}
  union {
    CreatCharacterRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatCharacterResDefaultTypeInternal _CreatCharacterRes_default_instance_;
PROTOBUF_CONSTEXPR BoolRes::BoolRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.act_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoolResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolResDefaultTypeInternal() {}
  union {
    BoolRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolResDefaultTypeInternal _BoolRes_default_instance_;
PROTOBUF_CONSTEXPR CharacterInfoRes::CharacterInfoRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterInfoResDefaultTypeInternal() {}
  union {
    CharacterInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterInfoResDefaultTypeInternal _CharacterInfoRes_default_instance_;
PROTOBUF_CONSTEXPR EcoRes::EcoRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.economy_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EcoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EcoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EcoResDefaultTypeInternal() {}
  union {
    EcoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EcoResDefaultTypeInternal _EcoRes_default_instance_;
PROTOBUF_CONSTEXPR MessageOfNews::MessageOfNews(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_id_)*/int64_t{0}
  , /*decltype(_impl_.to_id_)*/int64_t{0}
  , /*decltype(_impl_.team_id_)*/int64_t{0}
  , /*decltype(_impl_.news_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageOfNewsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOfNewsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOfNewsDefaultTypeInternal() {}
  union {
    MessageOfNews _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfNewsDefaultTypeInternal _MessageOfNews_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_Message2Clients_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message2Clients_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message2Clients_2eproto = nullptr;

const uint32_t TableStruct_Message2Clients_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMonkeySkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMonkeySkill, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMonkeySkill, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMonkeySkill, _impl_.angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.character_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.character_active_state_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.is_blind_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.blind_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.is_stunned_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.stunned_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.is_invisible_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.invisible_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.is_burned_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.burned_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.harm_cut_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.harm_cut_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.character_passive_state_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.facing_direction_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.view_range_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.common_attack_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.common_attack_cd_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.common_attack_range_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.skill_attack_cd_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.economy_depletion_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.kill_score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.shield_equipment_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.shoes_equipment_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.shoes_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.is_purified_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.purified_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.is_berserk_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.berserk_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.attack_buff_num_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.attack_buff_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.speed_buff_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfCharacter, _impl_.vision_buff_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBarracks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBarracks, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBarracks, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBarracks, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBarracks, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBarracks, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSpring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSpring, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSpring, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSpring, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSpring, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSpring, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfFarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfFarm, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfFarm, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfFarm, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfFarm, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfFarm, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTrap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTrap, _impl_.trap_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTrap, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTrap, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTrap, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTrap, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _impl_.economy_resource_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _impl_.economy_resource_state_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfEconomyResource, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _impl_.addition_resource_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _impl_.addition_resource_state_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAdditionResource, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _impl_.construction_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _impl_.construction_state_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfConstruction, _impl_.team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _impl_.cols_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.energy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _impl_.message_of_obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.buddhists_team_score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.monsters_team_score_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.buddhists_team_economy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.monsters_team_economy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.buddhists_hero_hp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.monsters_hero_hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.obj_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.game_state_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.all_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_speed_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_angle_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.act_success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::CreatCharacterRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::CreatCharacterRes, _impl_.act_success_),
  PROTOBUF_FIELD_OFFSET(::protobuf::CreatCharacterRes, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _impl_.act_success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::CharacterInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::CharacterInfoRes, _impl_.character_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::EcoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::EcoRes, _impl_.economy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.from_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.to_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.news_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protobuf::MessageOfMonkeySkill)},
  { 9, -1, -1, sizeof(::protobuf::MessageOfCharacter)},
  { 54, -1, -1, sizeof(::protobuf::MessageOfBarracks)},
  { 65, -1, -1, sizeof(::protobuf::MessageOfSpring)},
  { 76, -1, -1, sizeof(::protobuf::MessageOfFarm)},
  { 87, -1, -1, sizeof(::protobuf::MessageOfTrap)},
  { 98, -1, -1, sizeof(::protobuf::MessageOfEconomyResource)},
  { 110, -1, -1, sizeof(::protobuf::MessageOfAdditionResource)},
  { 122, -1, -1, sizeof(::protobuf::MessageOfConstruction)},
  { 134, -1, -1, sizeof(::protobuf::MessageOfMap_Row)},
  { 141, -1, -1, sizeof(::protobuf::MessageOfMap)},
  { 150, -1, -1, sizeof(::protobuf::MessageOfTeam)},
  { 160, -1, -1, sizeof(::protobuf::MessageOfObj)},
  { 177, -1, -1, sizeof(::protobuf::MessageOfAll)},
  { 190, -1, -1, sizeof(::protobuf::MessageToClient)},
  { 199, -1, -1, sizeof(::protobuf::MoveRes)},
  { 208, -1, -1, sizeof(::protobuf::CreatCharacterRes)},
  { 216, -1, -1, sizeof(::protobuf::BoolRes)},
  { 223, -1, -1, sizeof(::protobuf::CharacterInfoRes)},
  { 230, -1, -1, sizeof(::protobuf::EcoRes)},
  { 237, -1, -1, sizeof(::protobuf::MessageOfNews)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf::_MessageOfMonkeySkill_default_instance_._instance,
  &::protobuf::_MessageOfCharacter_default_instance_._instance,
  &::protobuf::_MessageOfBarracks_default_instance_._instance,
  &::protobuf::_MessageOfSpring_default_instance_._instance,
  &::protobuf::_MessageOfFarm_default_instance_._instance,
  &::protobuf::_MessageOfTrap_default_instance_._instance,
  &::protobuf::_MessageOfEconomyResource_default_instance_._instance,
  &::protobuf::_MessageOfAdditionResource_default_instance_._instance,
  &::protobuf::_MessageOfConstruction_default_instance_._instance,
  &::protobuf::_MessageOfMap_Row_default_instance_._instance,
  &::protobuf::_MessageOfMap_default_instance_._instance,
  &::protobuf::_MessageOfTeam_default_instance_._instance,
  &::protobuf::_MessageOfObj_default_instance_._instance,
  &::protobuf::_MessageOfAll_default_instance_._instance,
  &::protobuf::_MessageToClient_default_instance_._instance,
  &::protobuf::_MoveRes_default_instance_._instance,
  &::protobuf::_CreatCharacterRes_default_instance_._instance,
  &::protobuf::_BoolRes_default_instance_._instance,
  &::protobuf::_CharacterInfoRes_default_instance_._instance,
  &::protobuf::_EcoRes_default_instance_._instance,
  &::protobuf::_MessageOfNews_default_instance_._instance,
};

const char descriptor_table_protodef_Message2Clients_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Message2Clients.proto\022\010protobuf\032\021Messa"
  "geType.proto\"I\n\024MessageOfMonkeySkill\022\017\n\007"
  "team_id\030\001 \001(\003\022\021\n\tplayer_id\030\002 \001(\003\022\r\n\005angl"
  "e\030\003 \001(\001\"\263\007\n\022MessageOfCharacter\022\014\n\004guid\030\001"
  " \001(\003\022\017\n\007team_id\030\002 \001(\003\022\021\n\tplayer_id\030\003 \001(\003"
  "\022/\n\016character_type\030\004 \001(\0162\027.protobuf.Char"
  "acterType\0228\n\026character_active_state\030\005 \001("
  "\0162\030.protobuf.CharacterState\022\020\n\010is_blind\030"
  "\006 \001(\010\022\022\n\nblind_time\030\007 \001(\003\022\022\n\nis_stunned\030"
  "\010 \001(\010\022\024\n\014stunned_time\030\t \001(\003\022\024\n\014is_invisi"
  "ble\030\n \001(\010\022\026\n\016invisible_time\030\013 \001(\003\022\021\n\tis_"
  "burned\030\014 \001(\010\022\023\n\013burned_time\030\r \001(\003\022\020\n\010har"
  "m_cut\030\016 \001(\001\022\025\n\rharm_cut_time\030\017 \001(\003\0229\n\027ch"
  "aracter_passive_state\030\020 \001(\0162\030.protobuf.C"
  "haracterState\022\t\n\001x\030\021 \001(\005\022\t\n\001y\030\022 \001(\005\022\030\n\020f"
  "acing_direction\030\023 \001(\001\022\r\n\005speed\030\024 \001(\005\022\022\n\n"
  "view_range\030\025 \001(\005\022\025\n\rcommon_attack\030\026 \001(\005\022"
  "\030\n\020common_attack_cd\030\027 \001(\003\022\033\n\023common_atta"
  "ck_range\030\030 \001(\005\022\027\n\017skill_attack_cd\030\031 \001(\003\022"
  "\031\n\021economy_depletion\030\032 \001(\005\022\022\n\nkill_score"
  "\030\033 \001(\005\022\n\n\002hp\030\034 \001(\005\022\030\n\020shield_equipment\030\035"
  " \001(\005\022\027\n\017shoes_equipment\030\036 \001(\005\022\022\n\nshoes_t"
  "ime\030\037 \001(\003\022\023\n\013is_purified\030  \001(\010\022\025\n\rpurifi"
  "ed_time\030! \001(\003\022\022\n\nis_berserk\030\" \001(\010\022\024\n\014ber"
  "serk_time\030# \001(\003\022\027\n\017attack_buff_num\030$ \001(\005"
  "\022\030\n\020attack_buff_time\030% \001(\003\022\027\n\017speed_buff"
  "_time\030& \001(\003\022\030\n\020vision_buff_time\030\' \001(\003\"R\n"
  "\021MessageOfBarracks\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005"
  "\022\n\n\002hp\030\003 \001(\005\022\017\n\007team_id\030\004 \001(\003\022\n\n\002id\030\005 \001("
  "\005\"P\n\017MessageOfSpring\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001"
  "(\005\022\n\n\002hp\030\003 \001(\005\022\017\n\007team_id\030\004 \001(\003\022\n\n\002id\030\005 "
  "\001(\005\"N\n\rMessageOfFarm\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001"
  "(\005\022\n\n\002hp\030\003 \001(\005\022\017\n\007team_id\030\004 \001(\003\022\n\n\002id\030\005 "
  "\001(\005\"i\n\rMessageOfTrap\022%\n\ttrap_type\030\001 \001(\0162"
  "\022.protobuf.TrapType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001("
  "\005\022\017\n\007team_id\030\004 \001(\003\022\n\n\002id\030\005 \001(\005\"\313\001\n\030Messa"
  "geOfEconomyResource\022<\n\025economy_resource_"
  "type\030\001 \001(\0162\035.protobuf.EconomyResourceTyp"
  "e\022>\n\026economy_resource_state\030\002 \001(\0162\036.prot"
  "obuf.EconomyResourceState\022\t\n\001x\030\003 \001(\005\022\t\n\001"
  "y\030\004 \001(\005\022\017\n\007process\030\005 \001(\005\022\n\n\002id\030\006 \001(\005\"\313\001\n"
  "\031MessageOfAdditionResource\022>\n\026addition_r"
  "esource_type\030\001 \001(\0162\036.protobuf.AdditionRe"
  "sourceType\022@\n\027addition_resource_state\030\002 "
  "\001(\0162\037.protobuf.AdditionResourceState\022\t\n\001"
  "x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\n\n\002id\030\006 \001"
  "(\005\"\272\001\n\025MessageOfConstruction\0225\n\021construc"
  "tion_type\030\001 \001(\0162\032.protobuf.ConstructionT"
  "ype\0227\n\022construction_state\030\002 \001(\0162\033.protob"
  "uf.ConstructionState\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001"
  "(\005\022\n\n\002hp\030\005 \001(\005\022\017\n\007team_id\030\006 \001(\003\"\201\001\n\014Mess"
  "ageOfMap\022\016\n\006height\030\001 \001(\r\022\r\n\005width\030\002 \001(\r\022"
  "(\n\004rows\030\003 \003(\0132\032.protobuf.MessageOfMap.Ro"
  "w\032(\n\003Row\022!\n\004cols\030\001 \003(\0162\023.protobuf.PlaceT"
  "ype\"R\n\rMessageOfTeam\022\017\n\007team_id\030\001 \001(\003\022\021\n"
  "\tplayer_id\030\002 \001(\003\022\r\n\005score\030\003 \001(\003\022\016\n\006energ"
  "y\030\004 \001(\003\"\316\004\n\014MessageOfObj\0229\n\021character_me"
  "ssage\030\001 \001(\0132\034.protobuf.MessageOfCharacte"
  "rH\000\0227\n\020barracks_message\030\002 \001(\0132\033.protobuf"
  ".MessageOfBarracksH\000\0223\n\016spring_message\030\003"
  " \001(\0132\031.protobuf.MessageOfSpringH\000\022/\n\014far"
  "m_message\030\004 \001(\0132\027.protobuf.MessageOfFarm"
  "H\000\022/\n\014trap_message\030\005 \001(\0132\027.protobuf.Mess"
  "ageOfTrapH\000\022F\n\030economy_resource_message\030"
  "\006 \001(\0132\".protobuf.MessageOfEconomyResourc"
  "eH\000\022H\n\031addition_resource_message\030\007 \001(\0132#"
  ".protobuf.MessageOfAdditionResourceH\000\022-\n"
  "\013map_message\030\010 \001(\0132\026.protobuf.MessageOfM"
  "apH\000\022/\n\014news_message\030\t \001(\0132\027.protobuf.Me"
  "ssageOfNewsH\000\022/\n\014team_message\030\n \001(\0132\027.pr"
  "otobuf.MessageOfTeamH\000B\020\n\016message_of_obj"
  "\"\320\001\n\014MessageOfAll\022\021\n\tgame_time\030\001 \001(\005\022\034\n\024"
  "buddhists_team_score\030\002 \001(\005\022\033\n\023monsters_t"
  "eam_score\030\003 \001(\005\022\036\n\026buddhists_team_econom"
  "y\030\004 \001(\005\022\035\n\025monsters_team_economy\030\005 \001(\005\022\031"
  "\n\021buddhists_hero_hp\030\006 \001(\005\022\030\n\020monsters_he"
  "ro_hp\030\007 \001(\005\"\224\001\n\017MessageToClient\022+\n\013obj_m"
  "essage\030\001 \003(\0132\026.protobuf.MessageOfObj\022\'\n\n"
  "game_state\030\002 \001(\0162\023.protobuf.GameState\022+\n"
  "\013all_message\030\003 \001(\0132\026.protobuf.MessageOfA"
  "ll\"J\n\007MoveRes\022\024\n\014actual_speed\030\001 \001(\003\022\024\n\014a"
  "ctual_angle\030\002 \001(\001\022\023\n\013act_success\030\003 \001(\010\";"
  "\n\021CreatCharacterRes\022\023\n\013act_success\030\001 \001(\010"
  "\022\021\n\tplayer_id\030\002 \001(\003\"\036\n\007BoolRes\022\023\n\013act_su"
  "ccess\030\001 \001(\010\"H\n\020CharacterInfoRes\0224\n\016Chara"
  "cter_info\030\001 \003(\0132\034.protobuf.MessageOfChar"
  "acter\"\031\n\006EcoRes\022\017\n\007economy\030\001 \001(\003\"z\n\rMess"
  "ageOfNews\022\026\n\014text_message\030\001 \001(\tH\000\022\030\n\016bin"
  "ary_message\030\002 \001(\014H\000\022\017\n\007from_id\030\003 \001(\003\022\r\n\005"
  "to_id\030\004 \001(\003\022\017\n\007team_id\030\005 \001(\003B\006\n\004newsb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Message2Clients_2eproto_deps[1] = {
  &::descriptor_table_MessageType_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message2Clients_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message2Clients_2eproto = {
    false, false, 3604, descriptor_table_protodef_Message2Clients_2eproto,
    "Message2Clients.proto",
    &descriptor_table_Message2Clients_2eproto_once, descriptor_table_Message2Clients_2eproto_deps, 1, 21,
    schemas, file_default_instances, TableStruct_Message2Clients_2eproto::offsets,
    file_level_metadata_Message2Clients_2eproto, file_level_enum_descriptors_Message2Clients_2eproto,
    file_level_service_descriptors_Message2Clients_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message2Clients_2eproto_getter() {
  return &descriptor_table_Message2Clients_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message2Clients_2eproto(&descriptor_table_Message2Clients_2eproto);
namespace protobuf {

// ===================================================================

class MessageOfMonkeySkill::_Internal {
 public:
};

MessageOfMonkeySkill::MessageOfMonkeySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMonkeySkill)
}
MessageOfMonkeySkill::MessageOfMonkeySkill(const MessageOfMonkeySkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfMonkeySkill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angle_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.angle_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMonkeySkill)
}

inline void MessageOfMonkeySkill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.angle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfMonkeySkill::~MessageOfMonkeySkill() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfMonkeySkill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfMonkeySkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfMonkeySkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfMonkeySkill::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMonkeySkill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.angle_) -
      reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfMonkeySkill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfMonkeySkill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMonkeySkill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 team_id = 1;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_team_id(), target);
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
  }

  // double angle = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMonkeySkill)
  return target;
}

size_t MessageOfMonkeySkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMonkeySkill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 team_id = 1;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // double angle = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMonkeySkill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfMonkeySkill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfMonkeySkill::GetClassData() const { return &_class_data_; }


void MessageOfMonkeySkill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfMonkeySkill*>(&to_msg);
  auto& from = static_cast<const MessageOfMonkeySkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMonkeySkill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = from._internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfMonkeySkill::CopyFrom(const MessageOfMonkeySkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMonkeySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfMonkeySkill::IsInitialized() const {
  return true;
}

void MessageOfMonkeySkill::InternalSwap(MessageOfMonkeySkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfMonkeySkill, _impl_.angle_)
      + sizeof(MessageOfMonkeySkill::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(MessageOfMonkeySkill, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMonkeySkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[0]);
}

// ===================================================================

class MessageOfCharacter::_Internal {
 public:
};

MessageOfCharacter::MessageOfCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfCharacter)
}
MessageOfCharacter::MessageOfCharacter(const MessageOfCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guid_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.character_type_){}
    , decltype(_impl_.character_active_state_){}
    , decltype(_impl_.blind_time_){}
    , decltype(_impl_.stunned_time_){}
    , decltype(_impl_.is_blind_){}
    , decltype(_impl_.is_stunned_){}
    , decltype(_impl_.is_invisible_){}
    , decltype(_impl_.is_burned_){}
    , decltype(_impl_.character_passive_state_){}
    , decltype(_impl_.invisible_time_){}
    , decltype(_impl_.burned_time_){}
    , decltype(_impl_.harm_cut_){}
    , decltype(_impl_.harm_cut_time_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.facing_direction_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.view_range_){}
    , decltype(_impl_.common_attack_cd_){}
    , decltype(_impl_.common_attack_){}
    , decltype(_impl_.common_attack_range_){}
    , decltype(_impl_.skill_attack_cd_){}
    , decltype(_impl_.economy_depletion_){}
    , decltype(_impl_.kill_score_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.shield_equipment_){}
    , decltype(_impl_.shoes_time_){}
    , decltype(_impl_.shoes_equipment_){}
    , decltype(_impl_.is_purified_){}
    , decltype(_impl_.is_berserk_){}
    , decltype(_impl_.purified_time_){}
    , decltype(_impl_.berserk_time_){}
    , decltype(_impl_.attack_buff_time_){}
    , decltype(_impl_.speed_buff_time_){}
    , decltype(_impl_.vision_buff_time_){}
    , decltype(_impl_.attack_buff_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guid_, &from._impl_.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_buff_num_) -
    reinterpret_cast<char*>(&_impl_.guid_)) + sizeof(_impl_.attack_buff_num_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfCharacter)
}

inline void MessageOfCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guid_){int64_t{0}}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.character_type_){0}
    , decltype(_impl_.character_active_state_){0}
    , decltype(_impl_.blind_time_){int64_t{0}}
    , decltype(_impl_.stunned_time_){int64_t{0}}
    , decltype(_impl_.is_blind_){false}
    , decltype(_impl_.is_stunned_){false}
    , decltype(_impl_.is_invisible_){false}
    , decltype(_impl_.is_burned_){false}
    , decltype(_impl_.character_passive_state_){0}
    , decltype(_impl_.invisible_time_){int64_t{0}}
    , decltype(_impl_.burned_time_){int64_t{0}}
    , decltype(_impl_.harm_cut_){0}
    , decltype(_impl_.harm_cut_time_){int64_t{0}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.facing_direction_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.view_range_){0}
    , decltype(_impl_.common_attack_cd_){int64_t{0}}
    , decltype(_impl_.common_attack_){0}
    , decltype(_impl_.common_attack_range_){0}
    , decltype(_impl_.skill_attack_cd_){int64_t{0}}
    , decltype(_impl_.economy_depletion_){0}
    , decltype(_impl_.kill_score_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.shield_equipment_){0}
    , decltype(_impl_.shoes_time_){int64_t{0}}
    , decltype(_impl_.shoes_equipment_){0}
    , decltype(_impl_.is_purified_){false}
    , decltype(_impl_.is_berserk_){false}
    , decltype(_impl_.purified_time_){int64_t{0}}
    , decltype(_impl_.berserk_time_){int64_t{0}}
    , decltype(_impl_.attack_buff_time_){int64_t{0}}
    , decltype(_impl_.speed_buff_time_){int64_t{0}}
    , decltype(_impl_.vision_buff_time_){int64_t{0}}
    , decltype(_impl_.attack_buff_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfCharacter::~MessageOfCharacter() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_buff_num_) -
      reinterpret_cast<char*>(&_impl_.guid_)) + sizeof(_impl_.attack_buff_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.CharacterType character_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_character_type(static_cast<::protobuf::CharacterType>(val));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.CharacterState character_active_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_character_active_state(static_cast<::protobuf::CharacterState>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_blind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 blind_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.blind_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_stunned = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.is_stunned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stunned_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.stunned_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_invisible = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_invisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 invisible_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.invisible_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_burned = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_burned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 burned_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.burned_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double harm_cut = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.harm_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 harm_cut_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.harm_cut_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.CharacterState character_passive_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_character_passive_state(static_cast<::protobuf::CharacterState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double facing_direction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 speed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 view_range = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 common_attack = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.common_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 common_attack_cd = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.common_attack_cd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 common_attack_range = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.common_attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 skill_attack_cd = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.skill_attack_cd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 economy_depletion = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.economy_depletion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 kill_score = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.kill_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shield_equipment = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.shield_equipment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shoes_equipment = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.shoes_equipment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shoes_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.shoes_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_purified = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.is_purified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 purified_time = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.purified_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_berserk = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_berserk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 berserk_time = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.berserk_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attack_buff_num = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.attack_buff_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 attack_buff_time = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.attack_buff_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 speed_buff_time = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.speed_buff_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 vision_buff_time = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.vision_buff_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guid = 1;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_guid(), target);
  }

  // int64 team_id = 2;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_team_id(), target);
  }

  // int64 player_id = 3;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_player_id(), target);
  }

  // .protobuf.CharacterType character_type = 4;
  if (this->_internal_character_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_character_type(), target);
  }

  // .protobuf.CharacterState character_active_state = 5;
  if (this->_internal_character_active_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_character_active_state(), target);
  }

  // bool is_blind = 6;
  if (this->_internal_is_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_blind(), target);
  }

  // int64 blind_time = 7;
  if (this->_internal_blind_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_blind_time(), target);
  }

  // bool is_stunned = 8;
  if (this->_internal_is_stunned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_stunned(), target);
  }

  // int64 stunned_time = 9;
  if (this->_internal_stunned_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_stunned_time(), target);
  }

  // bool is_invisible = 10;
  if (this->_internal_is_invisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_invisible(), target);
  }

  // int64 invisible_time = 11;
  if (this->_internal_invisible_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_invisible_time(), target);
  }

  // bool is_burned = 12;
  if (this->_internal_is_burned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_burned(), target);
  }

  // int64 burned_time = 13;
  if (this->_internal_burned_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_burned_time(), target);
  }

  // double harm_cut = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_harm_cut = this->_internal_harm_cut();
  uint64_t raw_harm_cut;
  memcpy(&raw_harm_cut, &tmp_harm_cut, sizeof(tmp_harm_cut));
  if (raw_harm_cut != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_harm_cut(), target);
  }

  // int64 harm_cut_time = 15;
  if (this->_internal_harm_cut_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_harm_cut_time(), target);
  }

  // .protobuf.CharacterState character_passive_state = 16;
  if (this->_internal_character_passive_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_character_passive_state(), target);
  }

  // int32 x = 17;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_x(), target);
  }

  // int32 y = 18;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_y(), target);
  }

  // double facing_direction = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facing_direction = this->_internal_facing_direction();
  uint64_t raw_facing_direction;
  memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
  if (raw_facing_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_facing_direction(), target);
  }

  // int32 speed = 20;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_speed(), target);
  }

  // int32 view_range = 21;
  if (this->_internal_view_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_view_range(), target);
  }

  // int32 common_attack = 22;
  if (this->_internal_common_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_common_attack(), target);
  }

  // int64 common_attack_cd = 23;
  if (this->_internal_common_attack_cd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_common_attack_cd(), target);
  }

  // int32 common_attack_range = 24;
  if (this->_internal_common_attack_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_common_attack_range(), target);
  }

  // int64 skill_attack_cd = 25;
  if (this->_internal_skill_attack_cd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_skill_attack_cd(), target);
  }

  // int32 economy_depletion = 26;
  if (this->_internal_economy_depletion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_economy_depletion(), target);
  }

  // int32 kill_score = 27;
  if (this->_internal_kill_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_kill_score(), target);
  }

  // int32 hp = 28;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_hp(), target);
  }

  // int32 shield_equipment = 29;
  if (this->_internal_shield_equipment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_shield_equipment(), target);
  }

  // int32 shoes_equipment = 30;
  if (this->_internal_shoes_equipment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_shoes_equipment(), target);
  }

  // int64 shoes_time = 31;
  if (this->_internal_shoes_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_shoes_time(), target);
  }

  // bool is_purified = 32;
  if (this->_internal_is_purified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_is_purified(), target);
  }

  // int64 purified_time = 33;
  if (this->_internal_purified_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(33, this->_internal_purified_time(), target);
  }

  // bool is_berserk = 34;
  if (this->_internal_is_berserk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_is_berserk(), target);
  }

  // int64 berserk_time = 35;
  if (this->_internal_berserk_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(35, this->_internal_berserk_time(), target);
  }

  // int32 attack_buff_num = 36;
  if (this->_internal_attack_buff_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_attack_buff_num(), target);
  }

  // int64 attack_buff_time = 37;
  if (this->_internal_attack_buff_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(37, this->_internal_attack_buff_time(), target);
  }

  // int64 speed_buff_time = 38;
  if (this->_internal_speed_buff_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(38, this->_internal_speed_buff_time(), target);
  }

  // int64 vision_buff_time = 39;
  if (this->_internal_vision_buff_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(39, this->_internal_vision_buff_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfCharacter)
  return target;
}

size_t MessageOfCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 guid = 1;
  if (this->_internal_guid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
  }

  // int64 team_id = 2;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int64 player_id = 3;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // .protobuf.CharacterType character_type = 4;
  if (this->_internal_character_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_character_type());
  }

  // .protobuf.CharacterState character_active_state = 5;
  if (this->_internal_character_active_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_character_active_state());
  }

  // int64 blind_time = 7;
  if (this->_internal_blind_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_blind_time());
  }

  // int64 stunned_time = 9;
  if (this->_internal_stunned_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stunned_time());
  }

  // bool is_blind = 6;
  if (this->_internal_is_blind() != 0) {
    total_size += 1 + 1;
  }

  // bool is_stunned = 8;
  if (this->_internal_is_stunned() != 0) {
    total_size += 1 + 1;
  }

  // bool is_invisible = 10;
  if (this->_internal_is_invisible() != 0) {
    total_size += 1 + 1;
  }

  // bool is_burned = 12;
  if (this->_internal_is_burned() != 0) {
    total_size += 1 + 1;
  }

  // .protobuf.CharacterState character_passive_state = 16;
  if (this->_internal_character_passive_state() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_character_passive_state());
  }

  // int64 invisible_time = 11;
  if (this->_internal_invisible_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_invisible_time());
  }

  // int64 burned_time = 13;
  if (this->_internal_burned_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_burned_time());
  }

  // double harm_cut = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_harm_cut = this->_internal_harm_cut();
  uint64_t raw_harm_cut;
  memcpy(&raw_harm_cut, &tmp_harm_cut, sizeof(tmp_harm_cut));
  if (raw_harm_cut != 0) {
    total_size += 1 + 8;
  }

  // int64 harm_cut_time = 15;
  if (this->_internal_harm_cut_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_harm_cut_time());
  }

  // int32 x = 17;
  if (this->_internal_x() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 18;
  if (this->_internal_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // double facing_direction = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facing_direction = this->_internal_facing_direction();
  uint64_t raw_facing_direction;
  memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
  if (raw_facing_direction != 0) {
    total_size += 2 + 8;
  }

  // int32 speed = 20;
  if (this->_internal_speed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  // int32 view_range = 21;
  if (this->_internal_view_range() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_view_range());
  }

  // int64 common_attack_cd = 23;
  if (this->_internal_common_attack_cd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_common_attack_cd());
  }

  // int32 common_attack = 22;
  if (this->_internal_common_attack() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_common_attack());
  }

  // int32 common_attack_range = 24;
  if (this->_internal_common_attack_range() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_common_attack_range());
  }

  // int64 skill_attack_cd = 25;
  if (this->_internal_skill_attack_cd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_skill_attack_cd());
  }

  // int32 economy_depletion = 26;
  if (this->_internal_economy_depletion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_economy_depletion());
  }

  // int32 kill_score = 27;
  if (this->_internal_kill_score() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_kill_score());
  }

  // int32 hp = 28;
  if (this->_internal_hp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 shield_equipment = 29;
  if (this->_internal_shield_equipment() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_shield_equipment());
  }

  // int64 shoes_time = 31;
  if (this->_internal_shoes_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_shoes_time());
  }

  // int32 shoes_equipment = 30;
  if (this->_internal_shoes_equipment() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_shoes_equipment());
  }

  // bool is_purified = 32;
  if (this->_internal_is_purified() != 0) {
    total_size += 2 + 1;
  }

  // bool is_berserk = 34;
  if (this->_internal_is_berserk() != 0) {
    total_size += 2 + 1;
  }

  // int64 purified_time = 33;
  if (this->_internal_purified_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_purified_time());
  }

  // int64 berserk_time = 35;
  if (this->_internal_berserk_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_berserk_time());
  }

  // int64 attack_buff_time = 37;
  if (this->_internal_attack_buff_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_attack_buff_time());
  }

  // int64 speed_buff_time = 38;
  if (this->_internal_speed_buff_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_speed_buff_time());
  }

  // int64 vision_buff_time = 39;
  if (this->_internal_vision_buff_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_vision_buff_time());
  }

  // int32 attack_buff_num = 36;
  if (this->_internal_attack_buff_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attack_buff_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfCharacter::GetClassData() const { return &_class_data_; }


void MessageOfCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfCharacter*>(&to_msg);
  auto& from = static_cast<const MessageOfCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guid() != 0) {
    _this->_internal_set_guid(from._internal_guid());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_character_type() != 0) {
    _this->_internal_set_character_type(from._internal_character_type());
  }
  if (from._internal_character_active_state() != 0) {
    _this->_internal_set_character_active_state(from._internal_character_active_state());
  }
  if (from._internal_blind_time() != 0) {
    _this->_internal_set_blind_time(from._internal_blind_time());
  }
  if (from._internal_stunned_time() != 0) {
    _this->_internal_set_stunned_time(from._internal_stunned_time());
  }
  if (from._internal_is_blind() != 0) {
    _this->_internal_set_is_blind(from._internal_is_blind());
  }
  if (from._internal_is_stunned() != 0) {
    _this->_internal_set_is_stunned(from._internal_is_stunned());
  }
  if (from._internal_is_invisible() != 0) {
    _this->_internal_set_is_invisible(from._internal_is_invisible());
  }
  if (from._internal_is_burned() != 0) {
    _this->_internal_set_is_burned(from._internal_is_burned());
  }
  if (from._internal_character_passive_state() != 0) {
    _this->_internal_set_character_passive_state(from._internal_character_passive_state());
  }
  if (from._internal_invisible_time() != 0) {
    _this->_internal_set_invisible_time(from._internal_invisible_time());
  }
  if (from._internal_burned_time() != 0) {
    _this->_internal_set_burned_time(from._internal_burned_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_harm_cut = from._internal_harm_cut();
  uint64_t raw_harm_cut;
  memcpy(&raw_harm_cut, &tmp_harm_cut, sizeof(tmp_harm_cut));
  if (raw_harm_cut != 0) {
    _this->_internal_set_harm_cut(from._internal_harm_cut());
  }
  if (from._internal_harm_cut_time() != 0) {
    _this->_internal_set_harm_cut_time(from._internal_harm_cut_time());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_facing_direction = from._internal_facing_direction();
  uint64_t raw_facing_direction;
  memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
  if (raw_facing_direction != 0) {
    _this->_internal_set_facing_direction(from._internal_facing_direction());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_view_range() != 0) {
    _this->_internal_set_view_range(from._internal_view_range());
  }
  if (from._internal_common_attack_cd() != 0) {
    _this->_internal_set_common_attack_cd(from._internal_common_attack_cd());
  }
  if (from._internal_common_attack() != 0) {
    _this->_internal_set_common_attack(from._internal_common_attack());
  }
  if (from._internal_common_attack_range() != 0) {
    _this->_internal_set_common_attack_range(from._internal_common_attack_range());
  }
  if (from._internal_skill_attack_cd() != 0) {
    _this->_internal_set_skill_attack_cd(from._internal_skill_attack_cd());
  }
  if (from._internal_economy_depletion() != 0) {
    _this->_internal_set_economy_depletion(from._internal_economy_depletion());
  }
  if (from._internal_kill_score() != 0) {
    _this->_internal_set_kill_score(from._internal_kill_score());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_shield_equipment() != 0) {
    _this->_internal_set_shield_equipment(from._internal_shield_equipment());
  }
  if (from._internal_shoes_time() != 0) {
    _this->_internal_set_shoes_time(from._internal_shoes_time());
  }
  if (from._internal_shoes_equipment() != 0) {
    _this->_internal_set_shoes_equipment(from._internal_shoes_equipment());
  }
  if (from._internal_is_purified() != 0) {
    _this->_internal_set_is_purified(from._internal_is_purified());
  }
  if (from._internal_is_berserk() != 0) {
    _this->_internal_set_is_berserk(from._internal_is_berserk());
  }
  if (from._internal_purified_time() != 0) {
    _this->_internal_set_purified_time(from._internal_purified_time());
  }
  if (from._internal_berserk_time() != 0) {
    _this->_internal_set_berserk_time(from._internal_berserk_time());
  }
  if (from._internal_attack_buff_time() != 0) {
    _this->_internal_set_attack_buff_time(from._internal_attack_buff_time());
  }
  if (from._internal_speed_buff_time() != 0) {
    _this->_internal_set_speed_buff_time(from._internal_speed_buff_time());
  }
  if (from._internal_vision_buff_time() != 0) {
    _this->_internal_set_vision_buff_time(from._internal_vision_buff_time());
  }
  if (from._internal_attack_buff_num() != 0) {
    _this->_internal_set_attack_buff_num(from._internal_attack_buff_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfCharacter::CopyFrom(const MessageOfCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfCharacter::IsInitialized() const {
  return true;
}

void MessageOfCharacter::InternalSwap(MessageOfCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfCharacter, _impl_.attack_buff_num_)
      + sizeof(MessageOfCharacter::_impl_.attack_buff_num_)
      - PROTOBUF_FIELD_OFFSET(MessageOfCharacter, _impl_.guid_)>(
          reinterpret_cast<char*>(&_impl_.guid_),
          reinterpret_cast<char*>(&other->_impl_.guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[1]);
}

// ===================================================================

class MessageOfBarracks::_Internal {
 public:
};

MessageOfBarracks::MessageOfBarracks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfBarracks)
}
MessageOfBarracks::MessageOfBarracks(const MessageOfBarracks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfBarracks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfBarracks)
}

inline void MessageOfBarracks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfBarracks::~MessageOfBarracks() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfBarracks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfBarracks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfBarracks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfBarracks::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfBarracks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfBarracks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfBarracks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfBarracks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfBarracks)
  return target;
}

size_t MessageOfBarracks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfBarracks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBarracks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfBarracks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfBarracks::GetClassData() const { return &_class_data_; }


void MessageOfBarracks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfBarracks*>(&to_msg);
  auto& from = static_cast<const MessageOfBarracks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfBarracks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfBarracks::CopyFrom(const MessageOfBarracks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfBarracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfBarracks::IsInitialized() const {
  return true;
}

void MessageOfBarracks::InternalSwap(MessageOfBarracks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfBarracks, _impl_.id_)
      + sizeof(MessageOfBarracks::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfBarracks, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBarracks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[2]);
}

// ===================================================================

class MessageOfSpring::_Internal {
 public:
};

MessageOfSpring::MessageOfSpring(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfSpring)
}
MessageOfSpring::MessageOfSpring(const MessageOfSpring& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfSpring* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfSpring)
}

inline void MessageOfSpring::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfSpring::~MessageOfSpring() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfSpring)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfSpring::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfSpring::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfSpring::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfSpring)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfSpring::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfSpring::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfSpring)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfSpring)
  return target;
}

size_t MessageOfSpring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfSpring)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfSpring::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfSpring::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfSpring::GetClassData() const { return &_class_data_; }


void MessageOfSpring::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfSpring*>(&to_msg);
  auto& from = static_cast<const MessageOfSpring&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfSpring)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfSpring::CopyFrom(const MessageOfSpring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfSpring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfSpring::IsInitialized() const {
  return true;
}

void MessageOfSpring::InternalSwap(MessageOfSpring* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfSpring, _impl_.id_)
      + sizeof(MessageOfSpring::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfSpring, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfSpring::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[3]);
}

// ===================================================================

class MessageOfFarm::_Internal {
 public:
};

MessageOfFarm::MessageOfFarm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfFarm)
}
MessageOfFarm::MessageOfFarm(const MessageOfFarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfFarm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfFarm)
}

inline void MessageOfFarm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfFarm::~MessageOfFarm() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfFarm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfFarm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfFarm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfFarm::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfFarm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfFarm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfFarm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfFarm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfFarm)
  return target;
}

size_t MessageOfFarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfFarm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfFarm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfFarm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfFarm::GetClassData() const { return &_class_data_; }


void MessageOfFarm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfFarm*>(&to_msg);
  auto& from = static_cast<const MessageOfFarm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfFarm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfFarm::CopyFrom(const MessageOfFarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfFarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfFarm::IsInitialized() const {
  return true;
}

void MessageOfFarm::InternalSwap(MessageOfFarm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfFarm, _impl_.id_)
      + sizeof(MessageOfFarm::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfFarm, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfFarm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[4]);
}

// ===================================================================

class MessageOfTrap::_Internal {
 public:
};

MessageOfTrap::MessageOfTrap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfTrap)
}
MessageOfTrap::MessageOfTrap(const MessageOfTrap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfTrap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trap_type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.trap_type_, &from._impl_.trap_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.trap_type_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfTrap)
}

inline void MessageOfTrap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trap_type_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfTrap::~MessageOfTrap() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfTrap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfTrap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfTrap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfTrap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfTrap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.trap_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.trap_type_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfTrap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.TrapType trap_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trap_type(static_cast<::protobuf::TrapType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfTrap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfTrap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.TrapType trap_type = 1;
  if (this->_internal_trap_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trap_type(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfTrap)
  return target;
}

size_t MessageOfTrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfTrap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protobuf.TrapType trap_type = 1;
  if (this->_internal_trap_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trap_type());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int64 team_id = 4;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfTrap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfTrap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfTrap::GetClassData() const { return &_class_data_; }


void MessageOfTrap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfTrap*>(&to_msg);
  auto& from = static_cast<const MessageOfTrap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfTrap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trap_type() != 0) {
    _this->_internal_set_trap_type(from._internal_trap_type());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfTrap::CopyFrom(const MessageOfTrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfTrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfTrap::IsInitialized() const {
  return true;
}

void MessageOfTrap::InternalSwap(MessageOfTrap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfTrap, _impl_.id_)
      + sizeof(MessageOfTrap::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfTrap, _impl_.trap_type_)>(
          reinterpret_cast<char*>(&_impl_.trap_type_),
          reinterpret_cast<char*>(&other->_impl_.trap_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfTrap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[5]);
}

// ===================================================================

class MessageOfEconomyResource::_Internal {
 public:
};

MessageOfEconomyResource::MessageOfEconomyResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfEconomyResource)
}
MessageOfEconomyResource::MessageOfEconomyResource(const MessageOfEconomyResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfEconomyResource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.economy_resource_type_){}
    , decltype(_impl_.economy_resource_state_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.economy_resource_type_, &from._impl_.economy_resource_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.economy_resource_type_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfEconomyResource)
}

inline void MessageOfEconomyResource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.economy_resource_type_){0}
    , decltype(_impl_.economy_resource_state_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.process_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfEconomyResource::~MessageOfEconomyResource() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfEconomyResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfEconomyResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfEconomyResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfEconomyResource::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfEconomyResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.economy_resource_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.economy_resource_type_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfEconomyResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.EconomyResourceType economy_resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_economy_resource_type(static_cast<::protobuf::EconomyResourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.EconomyResourceState economy_resource_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_economy_resource_state(static_cast<::protobuf::EconomyResourceState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfEconomyResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfEconomyResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.EconomyResourceType economy_resource_type = 1;
  if (this->_internal_economy_resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_economy_resource_type(), target);
  }

  // .protobuf.EconomyResourceState economy_resource_state = 2;
  if (this->_internal_economy_resource_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_economy_resource_state(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // int32 process = 5;
  if (this->_internal_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_process(), target);
  }

  // int32 id = 6;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfEconomyResource)
  return target;
}

size_t MessageOfEconomyResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfEconomyResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protobuf.EconomyResourceType economy_resource_type = 1;
  if (this->_internal_economy_resource_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_economy_resource_type());
  }

  // .protobuf.EconomyResourceState economy_resource_state = 2;
  if (this->_internal_economy_resource_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_economy_resource_state());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 process = 5;
  if (this->_internal_process() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process());
  }

  // int32 id = 6;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfEconomyResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfEconomyResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfEconomyResource::GetClassData() const { return &_class_data_; }


void MessageOfEconomyResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfEconomyResource*>(&to_msg);
  auto& from = static_cast<const MessageOfEconomyResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfEconomyResource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_economy_resource_type() != 0) {
    _this->_internal_set_economy_resource_type(from._internal_economy_resource_type());
  }
  if (from._internal_economy_resource_state() != 0) {
    _this->_internal_set_economy_resource_state(from._internal_economy_resource_state());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_process() != 0) {
    _this->_internal_set_process(from._internal_process());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfEconomyResource::CopyFrom(const MessageOfEconomyResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfEconomyResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfEconomyResource::IsInitialized() const {
  return true;
}

void MessageOfEconomyResource::InternalSwap(MessageOfEconomyResource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfEconomyResource, _impl_.id_)
      + sizeof(MessageOfEconomyResource::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfEconomyResource, _impl_.economy_resource_type_)>(
          reinterpret_cast<char*>(&_impl_.economy_resource_type_),
          reinterpret_cast<char*>(&other->_impl_.economy_resource_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfEconomyResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[6]);
}

// ===================================================================

class MessageOfAdditionResource::_Internal {
 public:
};

MessageOfAdditionResource::MessageOfAdditionResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfAdditionResource)
}
MessageOfAdditionResource::MessageOfAdditionResource(const MessageOfAdditionResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfAdditionResource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addition_resource_type_){}
    , decltype(_impl_.addition_resource_state_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.addition_resource_type_, &from._impl_.addition_resource_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.addition_resource_type_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfAdditionResource)
}

inline void MessageOfAdditionResource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addition_resource_type_){0}
    , decltype(_impl_.addition_resource_state_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfAdditionResource::~MessageOfAdditionResource() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfAdditionResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfAdditionResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfAdditionResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfAdditionResource::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfAdditionResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.addition_resource_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.addition_resource_type_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfAdditionResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.AdditionResourceType addition_resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_addition_resource_type(static_cast<::protobuf::AdditionResourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.AdditionResourceState addition_resource_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_addition_resource_state(static_cast<::protobuf::AdditionResourceState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfAdditionResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfAdditionResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.AdditionResourceType addition_resource_type = 1;
  if (this->_internal_addition_resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_addition_resource_type(), target);
  }

  // .protobuf.AdditionResourceState addition_resource_state = 2;
  if (this->_internal_addition_resource_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_addition_resource_state(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_hp(), target);
  }

  // int32 id = 6;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfAdditionResource)
  return target;
}

size_t MessageOfAdditionResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfAdditionResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protobuf.AdditionResourceType addition_resource_type = 1;
  if (this->_internal_addition_resource_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_addition_resource_type());
  }

  // .protobuf.AdditionResourceState addition_resource_state = 2;
  if (this->_internal_addition_resource_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_addition_resource_state());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 id = 6;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfAdditionResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfAdditionResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfAdditionResource::GetClassData() const { return &_class_data_; }


void MessageOfAdditionResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfAdditionResource*>(&to_msg);
  auto& from = static_cast<const MessageOfAdditionResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfAdditionResource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addition_resource_type() != 0) {
    _this->_internal_set_addition_resource_type(from._internal_addition_resource_type());
  }
  if (from._internal_addition_resource_state() != 0) {
    _this->_internal_set_addition_resource_state(from._internal_addition_resource_state());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfAdditionResource::CopyFrom(const MessageOfAdditionResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfAdditionResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfAdditionResource::IsInitialized() const {
  return true;
}

void MessageOfAdditionResource::InternalSwap(MessageOfAdditionResource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfAdditionResource, _impl_.id_)
      + sizeof(MessageOfAdditionResource::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfAdditionResource, _impl_.addition_resource_type_)>(
          reinterpret_cast<char*>(&_impl_.addition_resource_type_),
          reinterpret_cast<char*>(&other->_impl_.addition_resource_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfAdditionResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[7]);
}

// ===================================================================

class MessageOfConstruction::_Internal {
 public:
};

MessageOfConstruction::MessageOfConstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfConstruction)
}
MessageOfConstruction::MessageOfConstruction(const MessageOfConstruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfConstruction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.construction_type_){}
    , decltype(_impl_.construction_state_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.construction_type_, &from._impl_.construction_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.construction_type_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfConstruction)
}

inline void MessageOfConstruction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.construction_type_){0}
    , decltype(_impl_.construction_state_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfConstruction::~MessageOfConstruction() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfConstruction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfConstruction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfConstruction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfConstruction::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfConstruction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.construction_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.construction_type_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfConstruction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.ConstructionType construction_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_construction_type(static_cast<::protobuf::ConstructionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.ConstructionState construction_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_construction_state(static_cast<::protobuf::ConstructionState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfConstruction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfConstruction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.ConstructionType construction_type = 1;
  if (this->_internal_construction_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_construction_type(), target);
  }

  // .protobuf.ConstructionState construction_state = 2;
  if (this->_internal_construction_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_construction_state(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_hp(), target);
  }

  // int64 team_id = 6;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfConstruction)
  return target;
}

size_t MessageOfConstruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfConstruction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protobuf.ConstructionType construction_type = 1;
  if (this->_internal_construction_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_construction_type());
  }

  // .protobuf.ConstructionState construction_state = 2;
  if (this->_internal_construction_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_construction_state());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int64 team_id = 6;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfConstruction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfConstruction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfConstruction::GetClassData() const { return &_class_data_; }


void MessageOfConstruction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfConstruction*>(&to_msg);
  auto& from = static_cast<const MessageOfConstruction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfConstruction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_construction_type() != 0) {
    _this->_internal_set_construction_type(from._internal_construction_type());
  }
  if (from._internal_construction_state() != 0) {
    _this->_internal_set_construction_state(from._internal_construction_state());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfConstruction::CopyFrom(const MessageOfConstruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfConstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfConstruction::IsInitialized() const {
  return true;
}

void MessageOfConstruction::InternalSwap(MessageOfConstruction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfConstruction, _impl_.hp_)
      + sizeof(MessageOfConstruction::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(MessageOfConstruction, _impl_.construction_type_)>(
          reinterpret_cast<char*>(&_impl_.construction_type_),
          reinterpret_cast<char*>(&other->_impl_.construction_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfConstruction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[8]);
}

// ===================================================================

class MessageOfMap_Row::_Internal {
 public:
};

MessageOfMap_Row::MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap.Row)
}
MessageOfMap_Row::MessageOfMap_Row(const MessageOfMap_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfMap_Row* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cols_){from._impl_.cols_}
    , /*decltype(_impl_._cols_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap.Row)
}

inline void MessageOfMap_Row::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cols_){arena}
    , /*decltype(_impl_._cols_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfMap_Row::~MessageOfMap_Row() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfMap.Row)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfMap_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cols_.~RepeatedField();
}

void MessageOfMap_Row::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfMap_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cols_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfMap_Row::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.PlaceType cols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_cols(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_cols(static_cast<::protobuf::PlaceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfMap_Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.PlaceType cols = 1;
  {
    int byte_size = _impl_._cols_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.cols_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap.Row)
  return target;
}

size_t MessageOfMap_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.PlaceType cols = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_cols_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_cols(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cols_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfMap_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfMap_Row::GetClassData() const { return &_class_data_; }


void MessageOfMap_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfMap_Row*>(&to_msg);
  auto& from = static_cast<const MessageOfMap_Row&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap.Row)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cols_.MergeFrom(from._impl_.cols_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfMap_Row::CopyFrom(const MessageOfMap_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfMap_Row::IsInitialized() const {
  return true;
}

void MessageOfMap_Row::InternalSwap(MessageOfMap_Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cols_.InternalSwap(&other->_impl_.cols_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap_Row::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[9]);
}

// ===================================================================

class MessageOfMap::_Internal {
 public:
};

MessageOfMap::MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap)
}
MessageOfMap::MessageOfMap(const MessageOfMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rows_){from._impl_.rows_}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap)
}

inline void MessageOfMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rows_){arena}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfMap::~MessageOfMap() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rows_.~RepeatedPtrField();
}

void MessageOfMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rows_.Clear();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.width_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.MessageOfMap.Row rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // repeated .protobuf.MessageOfMap.Row rows = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_rows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap)
  return target;
}

size_t MessageOfMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.MessageOfMap.Row rows = 3;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->_impl_.rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfMap::GetClassData() const { return &_class_data_; }


void MessageOfMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfMap*>(&to_msg);
  auto& from = static_cast<const MessageOfMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rows_.MergeFrom(from._impl_.rows_);
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfMap::CopyFrom(const MessageOfMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfMap::IsInitialized() const {
  return true;
}

void MessageOfMap::InternalSwap(MessageOfMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rows_.InternalSwap(&other->_impl_.rows_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfMap, _impl_.width_)
      + sizeof(MessageOfMap::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(MessageOfMap, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[10]);
}

// ===================================================================

class MessageOfTeam::_Internal {
 public:
};

MessageOfTeam::MessageOfTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfTeam)
}
MessageOfTeam::MessageOfTeam(const MessageOfTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.energy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.energy_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.energy_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfTeam)
}

inline void MessageOfTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.score_){int64_t{0}}
    , decltype(_impl_.energy_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfTeam::~MessageOfTeam() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.energy_) -
      reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.energy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 team_id = 1;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_team_id(), target);
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
  }

  // int64 score = 3;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_score(), target);
  }

  // int64 energy = 4;
  if (this->_internal_energy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_energy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfTeam)
  return target;
}

size_t MessageOfTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 team_id = 1;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // int64 score = 3;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_score());
  }

  // int64 energy = 4;
  if (this->_internal_energy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_energy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfTeam::GetClassData() const { return &_class_data_; }


void MessageOfTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfTeam*>(&to_msg);
  auto& from = static_cast<const MessageOfTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_energy() != 0) {
    _this->_internal_set_energy(from._internal_energy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfTeam::CopyFrom(const MessageOfTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfTeam::IsInitialized() const {
  return true;
}

void MessageOfTeam::InternalSwap(MessageOfTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfTeam, _impl_.energy_)
      + sizeof(MessageOfTeam::_impl_.energy_)
      - PROTOBUF_FIELD_OFFSET(MessageOfTeam, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[11]);
}

// ===================================================================

class MessageOfObj::_Internal {
 public:
  static const ::protobuf::MessageOfCharacter& character_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfBarracks& barracks_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfSpring& spring_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfFarm& farm_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfTrap& trap_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfEconomyResource& economy_resource_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfAdditionResource& addition_resource_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfMap& map_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfNews& news_message(const MessageOfObj* msg);
  static const ::protobuf::MessageOfTeam& team_message(const MessageOfObj* msg);
};

const ::protobuf::MessageOfCharacter&
MessageOfObj::_Internal::character_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.character_message_;
}
const ::protobuf::MessageOfBarracks&
MessageOfObj::_Internal::barracks_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.barracks_message_;
}
const ::protobuf::MessageOfSpring&
MessageOfObj::_Internal::spring_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.spring_message_;
}
const ::protobuf::MessageOfFarm&
MessageOfObj::_Internal::farm_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.farm_message_;
}
const ::protobuf::MessageOfTrap&
MessageOfObj::_Internal::trap_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.trap_message_;
}
const ::protobuf::MessageOfEconomyResource&
MessageOfObj::_Internal::economy_resource_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.economy_resource_message_;
}
const ::protobuf::MessageOfAdditionResource&
MessageOfObj::_Internal::addition_resource_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.addition_resource_message_;
}
const ::protobuf::MessageOfMap&
MessageOfObj::_Internal::map_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.map_message_;
}
const ::protobuf::MessageOfNews&
MessageOfObj::_Internal::news_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.news_message_;
}
const ::protobuf::MessageOfTeam&
MessageOfObj::_Internal::team_message(const MessageOfObj* msg) {
  return *msg->_impl_.message_of_obj_.team_message_;
}
void MessageOfObj::set_allocated_character_message(::protobuf::MessageOfCharacter* character_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (character_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character_message);
    if (message_arena != submessage_arena) {
      character_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_message, submessage_arena);
    }
    set_has_character_message();
    _impl_.message_of_obj_.character_message_ = character_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.character_message)
}
void MessageOfObj::set_allocated_barracks_message(::protobuf::MessageOfBarracks* barracks_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (barracks_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(barracks_message);
    if (message_arena != submessage_arena) {
      barracks_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barracks_message, submessage_arena);
    }
    set_has_barracks_message();
    _impl_.message_of_obj_.barracks_message_ = barracks_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.barracks_message)
}
void MessageOfObj::set_allocated_spring_message(::protobuf::MessageOfSpring* spring_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (spring_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spring_message);
    if (message_arena != submessage_arena) {
      spring_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spring_message, submessage_arena);
    }
    set_has_spring_message();
    _impl_.message_of_obj_.spring_message_ = spring_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.spring_message)
}
void MessageOfObj::set_allocated_farm_message(::protobuf::MessageOfFarm* farm_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (farm_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(farm_message);
    if (message_arena != submessage_arena) {
      farm_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, farm_message, submessage_arena);
    }
    set_has_farm_message();
    _impl_.message_of_obj_.farm_message_ = farm_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.farm_message)
}
void MessageOfObj::set_allocated_trap_message(::protobuf::MessageOfTrap* trap_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (trap_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trap_message);
    if (message_arena != submessage_arena) {
      trap_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trap_message, submessage_arena);
    }
    set_has_trap_message();
    _impl_.message_of_obj_.trap_message_ = trap_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.trap_message)
}
void MessageOfObj::set_allocated_economy_resource_message(::protobuf::MessageOfEconomyResource* economy_resource_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (economy_resource_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(economy_resource_message);
    if (message_arena != submessage_arena) {
      economy_resource_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, economy_resource_message, submessage_arena);
    }
    set_has_economy_resource_message();
    _impl_.message_of_obj_.economy_resource_message_ = economy_resource_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.economy_resource_message)
}
void MessageOfObj::set_allocated_addition_resource_message(::protobuf::MessageOfAdditionResource* addition_resource_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (addition_resource_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addition_resource_message);
    if (message_arena != submessage_arena) {
      addition_resource_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addition_resource_message, submessage_arena);
    }
    set_has_addition_resource_message();
    _impl_.message_of_obj_.addition_resource_message_ = addition_resource_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.addition_resource_message)
}
void MessageOfObj::set_allocated_map_message(::protobuf::MessageOfMap* map_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (map_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_message);
    if (message_arena != submessage_arena) {
      map_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_message, submessage_arena);
    }
    set_has_map_message();
    _impl_.message_of_obj_.map_message_ = map_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.map_message)
}
void MessageOfObj::set_allocated_news_message(::protobuf::MessageOfNews* news_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (news_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(news_message);
    if (message_arena != submessage_arena) {
      news_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, news_message, submessage_arena);
    }
    set_has_news_message();
    _impl_.message_of_obj_.news_message_ = news_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.news_message)
}
void MessageOfObj::set_allocated_team_message(::protobuf::MessageOfTeam* team_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_of_obj();
  if (team_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_message);
    if (message_arena != submessage_arena) {
      team_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_message, submessage_arena);
    }
    set_has_team_message();
    _impl_.message_of_obj_.team_message_ = team_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.team_message)
}
MessageOfObj::MessageOfObj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfObj)
}
MessageOfObj::MessageOfObj(const MessageOfObj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfObj* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_of_obj_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_of_obj();
  switch (from.message_of_obj_case()) {
    case kCharacterMessage: {
      _this->_internal_mutable_character_message()->::protobuf::MessageOfCharacter::MergeFrom(
          from._internal_character_message());
      break;
    }
    case kBarracksMessage: {
      _this->_internal_mutable_barracks_message()->::protobuf::MessageOfBarracks::MergeFrom(
          from._internal_barracks_message());
      break;
    }
    case kSpringMessage: {
      _this->_internal_mutable_spring_message()->::protobuf::MessageOfSpring::MergeFrom(
          from._internal_spring_message());
      break;
    }
    case kFarmMessage: {
      _this->_internal_mutable_farm_message()->::protobuf::MessageOfFarm::MergeFrom(
          from._internal_farm_message());
      break;
    }
    case kTrapMessage: {
      _this->_internal_mutable_trap_message()->::protobuf::MessageOfTrap::MergeFrom(
          from._internal_trap_message());
      break;
    }
    case kEconomyResourceMessage: {
      _this->_internal_mutable_economy_resource_message()->::protobuf::MessageOfEconomyResource::MergeFrom(
          from._internal_economy_resource_message());
      break;
    }
    case kAdditionResourceMessage: {
      _this->_internal_mutable_addition_resource_message()->::protobuf::MessageOfAdditionResource::MergeFrom(
          from._internal_addition_resource_message());
      break;
    }
    case kMapMessage: {
      _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
          from._internal_map_message());
      break;
    }
    case kNewsMessage: {
      _this->_internal_mutable_news_message()->::protobuf::MessageOfNews::MergeFrom(
          from._internal_news_message());
      break;
    }
    case kTeamMessage: {
      _this->_internal_mutable_team_message()->::protobuf::MessageOfTeam::MergeFrom(
          from._internal_team_message());
      break;
    }
    case MESSAGE_OF_OBJ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfObj)
}

inline void MessageOfObj::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_of_obj_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message_of_obj();
}

MessageOfObj::~MessageOfObj() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfObj)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfObj::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_of_obj()) {
    clear_message_of_obj();
  }
}

void MessageOfObj::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfObj::clear_message_of_obj() {
// @@protoc_insertion_point(one_of_clear_start:protobuf.MessageOfObj)
  switch (message_of_obj_case()) {
    case kCharacterMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.character_message_;
      }
      break;
    }
    case kBarracksMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.barracks_message_;
      }
      break;
    }
    case kSpringMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.spring_message_;
      }
      break;
    }
    case kFarmMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.farm_message_;
      }
      break;
    }
    case kTrapMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.trap_message_;
      }
      break;
    }
    case kEconomyResourceMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.economy_resource_message_;
      }
      break;
    }
    case kAdditionResourceMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.addition_resource_message_;
      }
      break;
    }
    case kMapMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.map_message_;
      }
      break;
    }
    case kNewsMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.news_message_;
      }
      break;
    }
    case kTeamMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_of_obj_.team_message_;
      }
      break;
    }
    case MESSAGE_OF_OBJ_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_OF_OBJ_NOT_SET;
}


void MessageOfObj::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfObj)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_of_obj();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfObj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuf.MessageOfCharacter character_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfBarracks barracks_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_barracks_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfSpring spring_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spring_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfFarm farm_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_farm_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfTrap trap_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trap_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfEconomyResource economy_resource_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_economy_resource_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfAdditionResource addition_resource_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_addition_resource_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfMap map_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfNews news_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_news_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfTeam team_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfObj::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfObj)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuf.MessageOfCharacter character_message = 1;
  if (_internal_has_character_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::character_message(this),
        _Internal::character_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfBarracks barracks_message = 2;
  if (_internal_has_barracks_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::barracks_message(this),
        _Internal::barracks_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfSpring spring_message = 3;
  if (_internal_has_spring_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spring_message(this),
        _Internal::spring_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfFarm farm_message = 4;
  if (_internal_has_farm_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::farm_message(this),
        _Internal::farm_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfTrap trap_message = 5;
  if (_internal_has_trap_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::trap_message(this),
        _Internal::trap_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfEconomyResource economy_resource_message = 6;
  if (_internal_has_economy_resource_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::economy_resource_message(this),
        _Internal::economy_resource_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfAdditionResource addition_resource_message = 7;
  if (_internal_has_addition_resource_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::addition_resource_message(this),
        _Internal::addition_resource_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfMap map_message = 8;
  if (_internal_has_map_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::map_message(this),
        _Internal::map_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfNews news_message = 9;
  if (_internal_has_news_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::news_message(this),
        _Internal::news_message(this).GetCachedSize(), target, stream);
  }

  // .protobuf.MessageOfTeam team_message = 10;
  if (_internal_has_team_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::team_message(this),
        _Internal::team_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfObj)
  return target;
}

size_t MessageOfObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfObj)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_of_obj_case()) {
    // .protobuf.MessageOfCharacter character_message = 1;
    case kCharacterMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.character_message_);
      break;
    }
    // .protobuf.MessageOfBarracks barracks_message = 2;
    case kBarracksMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.barracks_message_);
      break;
    }
    // .protobuf.MessageOfSpring spring_message = 3;
    case kSpringMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.spring_message_);
      break;
    }
    // .protobuf.MessageOfFarm farm_message = 4;
    case kFarmMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.farm_message_);
      break;
    }
    // .protobuf.MessageOfTrap trap_message = 5;
    case kTrapMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.trap_message_);
      break;
    }
    // .protobuf.MessageOfEconomyResource economy_resource_message = 6;
    case kEconomyResourceMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.economy_resource_message_);
      break;
    }
    // .protobuf.MessageOfAdditionResource addition_resource_message = 7;
    case kAdditionResourceMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.addition_resource_message_);
      break;
    }
    // .protobuf.MessageOfMap map_message = 8;
    case kMapMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.map_message_);
      break;
    }
    // .protobuf.MessageOfNews news_message = 9;
    case kNewsMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.news_message_);
      break;
    }
    // .protobuf.MessageOfTeam team_message = 10;
    case kTeamMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_of_obj_.team_message_);
      break;
    }
    case MESSAGE_OF_OBJ_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfObj::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfObj::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfObj::GetClassData() const { return &_class_data_; }


void MessageOfObj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfObj*>(&to_msg);
  auto& from = static_cast<const MessageOfObj&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfObj)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_of_obj_case()) {
    case kCharacterMessage: {
      _this->_internal_mutable_character_message()->::protobuf::MessageOfCharacter::MergeFrom(
          from._internal_character_message());
      break;
    }
    case kBarracksMessage: {
      _this->_internal_mutable_barracks_message()->::protobuf::MessageOfBarracks::MergeFrom(
          from._internal_barracks_message());
      break;
    }
    case kSpringMessage: {
      _this->_internal_mutable_spring_message()->::protobuf::MessageOfSpring::MergeFrom(
          from._internal_spring_message());
      break;
    }
    case kFarmMessage: {
      _this->_internal_mutable_farm_message()->::protobuf::MessageOfFarm::MergeFrom(
          from._internal_farm_message());
      break;
    }
    case kTrapMessage: {
      _this->_internal_mutable_trap_message()->::protobuf::MessageOfTrap::MergeFrom(
          from._internal_trap_message());
      break;
    }
    case kEconomyResourceMessage: {
      _this->_internal_mutable_economy_resource_message()->::protobuf::MessageOfEconomyResource::MergeFrom(
          from._internal_economy_resource_message());
      break;
    }
    case kAdditionResourceMessage: {
      _this->_internal_mutable_addition_resource_message()->::protobuf::MessageOfAdditionResource::MergeFrom(
          from._internal_addition_resource_message());
      break;
    }
    case kMapMessage: {
      _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
          from._internal_map_message());
      break;
    }
    case kNewsMessage: {
      _this->_internal_mutable_news_message()->::protobuf::MessageOfNews::MergeFrom(
          from._internal_news_message());
      break;
    }
    case kTeamMessage: {
      _this->_internal_mutable_team_message()->::protobuf::MessageOfTeam::MergeFrom(
          from._internal_team_message());
      break;
    }
    case MESSAGE_OF_OBJ_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfObj::CopyFrom(const MessageOfObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfObj::IsInitialized() const {
  return true;
}

void MessageOfObj::InternalSwap(MessageOfObj* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_of_obj_, other->_impl_.message_of_obj_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfObj::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[12]);
}

// ===================================================================

class MessageOfAll::_Internal {
 public:
};

MessageOfAll::MessageOfAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfAll)
}
MessageOfAll::MessageOfAll(const MessageOfAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfAll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_time_){}
    , decltype(_impl_.buddhists_team_score_){}
    , decltype(_impl_.monsters_team_score_){}
    , decltype(_impl_.buddhists_team_economy_){}
    , decltype(_impl_.monsters_team_economy_){}
    , decltype(_impl_.buddhists_hero_hp_){}
    , decltype(_impl_.monsters_hero_hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_, &from._impl_.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monsters_hero_hp_) -
    reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.monsters_hero_hp_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfAll)
}

inline void MessageOfAll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_time_){0}
    , decltype(_impl_.buddhists_team_score_){0}
    , decltype(_impl_.monsters_team_score_){0}
    , decltype(_impl_.buddhists_team_economy_){0}
    , decltype(_impl_.monsters_team_economy_){0}
    , decltype(_impl_.buddhists_hero_hp_){0}
    , decltype(_impl_.monsters_hero_hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageOfAll::~MessageOfAll() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfAll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageOfAll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfAll::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monsters_hero_hp_) -
      reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.monsters_hero_hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buddhists_team_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buddhists_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 monsters_team_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.monsters_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buddhists_team_economy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.buddhists_team_economy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 monsters_team_economy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.monsters_team_economy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buddhists_hero_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.buddhists_hero_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 monsters_hero_hp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.monsters_hero_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_time = 1;
  if (this->_internal_game_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_time(), target);
  }

  // int32 buddhists_team_score = 2;
  if (this->_internal_buddhists_team_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_buddhists_team_score(), target);
  }

  // int32 monsters_team_score = 3;
  if (this->_internal_monsters_team_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_monsters_team_score(), target);
  }

  // int32 buddhists_team_economy = 4;
  if (this->_internal_buddhists_team_economy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_buddhists_team_economy(), target);
  }

  // int32 monsters_team_economy = 5;
  if (this->_internal_monsters_team_economy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_monsters_team_economy(), target);
  }

  // int32 buddhists_hero_hp = 6;
  if (this->_internal_buddhists_hero_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_buddhists_hero_hp(), target);
  }

  // int32 monsters_hero_hp = 7;
  if (this->_internal_monsters_hero_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_monsters_hero_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfAll)
  return target;
}

size_t MessageOfAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_time = 1;
  if (this->_internal_game_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
  }

  // int32 buddhists_team_score = 2;
  if (this->_internal_buddhists_team_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buddhists_team_score());
  }

  // int32 monsters_team_score = 3;
  if (this->_internal_monsters_team_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsters_team_score());
  }

  // int32 buddhists_team_economy = 4;
  if (this->_internal_buddhists_team_economy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buddhists_team_economy());
  }

  // int32 monsters_team_economy = 5;
  if (this->_internal_monsters_team_economy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsters_team_economy());
  }

  // int32 buddhists_hero_hp = 6;
  if (this->_internal_buddhists_hero_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buddhists_hero_hp());
  }

  // int32 monsters_hero_hp = 7;
  if (this->_internal_monsters_hero_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monsters_hero_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfAll::GetClassData() const { return &_class_data_; }


void MessageOfAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfAll*>(&to_msg);
  auto& from = static_cast<const MessageOfAll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfAll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_time() != 0) {
    _this->_internal_set_game_time(from._internal_game_time());
  }
  if (from._internal_buddhists_team_score() != 0) {
    _this->_internal_set_buddhists_team_score(from._internal_buddhists_team_score());
  }
  if (from._internal_monsters_team_score() != 0) {
    _this->_internal_set_monsters_team_score(from._internal_monsters_team_score());
  }
  if (from._internal_buddhists_team_economy() != 0) {
    _this->_internal_set_buddhists_team_economy(from._internal_buddhists_team_economy());
  }
  if (from._internal_monsters_team_economy() != 0) {
    _this->_internal_set_monsters_team_economy(from._internal_monsters_team_economy());
  }
  if (from._internal_buddhists_hero_hp() != 0) {
    _this->_internal_set_buddhists_hero_hp(from._internal_buddhists_hero_hp());
  }
  if (from._internal_monsters_hero_hp() != 0) {
    _this->_internal_set_monsters_hero_hp(from._internal_monsters_hero_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfAll::CopyFrom(const MessageOfAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfAll::IsInitialized() const {
  return true;
}

void MessageOfAll::InternalSwap(MessageOfAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfAll, _impl_.monsters_hero_hp_)
      + sizeof(MessageOfAll::_impl_.monsters_hero_hp_)
      - PROTOBUF_FIELD_OFFSET(MessageOfAll, _impl_.game_time_)>(
          reinterpret_cast<char*>(&_impl_.game_time_),
          reinterpret_cast<char*>(&other->_impl_.game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfAll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[13]);
}

// ===================================================================

class MessageToClient::_Internal {
 public:
  static const ::protobuf::MessageOfAll& all_message(const MessageToClient* msg);
};

const ::protobuf::MessageOfAll&
MessageToClient::_Internal::all_message(const MessageToClient* msg) {
  return *msg->_impl_.all_message_;
}
MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageToClient)
}
MessageToClient::MessageToClient(const MessageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageToClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obj_message_){from._impl_.obj_message_}
    , decltype(_impl_.all_message_){nullptr}
    , decltype(_impl_.game_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_all_message()) {
    _this->_impl_.all_message_ = new ::protobuf::MessageOfAll(*from._impl_.all_message_);
  }
  _this->_impl_.game_state_ = from._impl_.game_state_;
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageToClient)
}

inline void MessageToClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obj_message_){arena}
    , decltype(_impl_.all_message_){nullptr}
    , decltype(_impl_.game_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessageToClient::~MessageToClient() {
  // @@protoc_insertion_point(destructor:protobuf.MessageToClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obj_message_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.all_message_;
}

void MessageToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageToClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obj_message_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.all_message_ != nullptr) {
    delete _impl_.all_message_;
  }
  _impl_.all_message_ = nullptr;
  _impl_.game_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.MessageOfObj obj_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obj_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.GameState game_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game_state(static_cast<::protobuf::GameState>(val));
        } else
          goto handle_unusual;
        continue;
      // .protobuf.MessageOfAll all_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageToClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.MessageOfObj obj_message = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obj_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_obj_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .protobuf.GameState game_state = 2;
  if (this->_internal_game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_state(), target);
  }

  // .protobuf.MessageOfAll all_message = 3;
  if (this->_internal_has_all_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::all_message(this),
        _Internal::all_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageToClient)
  return target;
}

size_t MessageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageToClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.MessageOfObj obj_message = 1;
  total_size += 1UL * this->_internal_obj_message_size();
  for (const auto& msg : this->_impl_.obj_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protobuf.MessageOfAll all_message = 3;
  if (this->_internal_has_all_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.all_message_);
  }

  // .protobuf.GameState game_state = 2;
  if (this->_internal_game_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageToClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToClient::GetClassData() const { return &_class_data_; }


void MessageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageToClient*>(&to_msg);
  auto& from = static_cast<const MessageToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageToClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obj_message_.MergeFrom(from._impl_.obj_message_);
  if (from._internal_has_all_message()) {
    _this->_internal_mutable_all_message()->::protobuf::MessageOfAll::MergeFrom(
        from._internal_all_message());
  }
  if (from._internal_game_state() != 0) {
    _this->_internal_set_game_state(from._internal_game_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToClient::CopyFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient::IsInitialized() const {
  return true;
}

void MessageToClient::InternalSwap(MessageToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.obj_message_.InternalSwap(&other->_impl_.obj_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageToClient, _impl_.game_state_)
      + sizeof(MessageToClient::_impl_.game_state_)
      - PROTOBUF_FIELD_OFFSET(MessageToClient, _impl_.all_message_)>(
          reinterpret_cast<char*>(&_impl_.all_message_),
          reinterpret_cast<char*>(&other->_impl_.all_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[14]);
}

// ===================================================================

class MoveRes::_Internal {
 public:
};

MoveRes::MoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MoveRes)
}
MoveRes::MoveRes(const MoveRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actual_speed_){}
    , decltype(_impl_.actual_angle_){}
    , decltype(_impl_.act_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.actual_speed_, &from._impl_.actual_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_success_) -
    reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.act_success_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MoveRes)
}

inline void MoveRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actual_speed_){int64_t{0}}
    , decltype(_impl_.actual_angle_){0}
    , decltype(_impl_.act_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveRes::~MoveRes() {
  // @@protoc_insertion_point(destructor:protobuf.MoveRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MoveRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.actual_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.act_success_) -
      reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.act_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 actual_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.actual_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double actual_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.actual_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool act_success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MoveRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 actual_speed = 1;
  if (this->_internal_actual_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_actual_speed(), target);
  }

  // double actual_angle = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actual_angle = this->_internal_actual_angle();
  uint64_t raw_actual_angle;
  memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
  if (raw_actual_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_actual_angle(), target);
  }

  // bool act_success = 3;
  if (this->_internal_act_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_act_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MoveRes)
  return target;
}

size_t MoveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MoveRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 actual_speed = 1;
  if (this->_internal_actual_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_actual_speed());
  }

  // double actual_angle = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actual_angle = this->_internal_actual_angle();
  uint64_t raw_actual_angle;
  memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
  if (raw_actual_angle != 0) {
    total_size += 1 + 8;
  }

  // bool act_success = 3;
  if (this->_internal_act_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRes::GetClassData() const { return &_class_data_; }


void MoveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveRes*>(&to_msg);
  auto& from = static_cast<const MoveRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MoveRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_actual_speed() != 0) {
    _this->_internal_set_actual_speed(from._internal_actual_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actual_angle = from._internal_actual_angle();
  uint64_t raw_actual_angle;
  memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
  if (raw_actual_angle != 0) {
    _this->_internal_set_actual_angle(from._internal_actual_angle());
  }
  if (from._internal_act_success() != 0) {
    _this->_internal_set_act_success(from._internal_act_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRes::CopyFrom(const MoveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRes::IsInitialized() const {
  return true;
}

void MoveRes::InternalSwap(MoveRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.act_success_)
      + sizeof(MoveRes::_impl_.act_success_)
      - PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.actual_speed_)>(
          reinterpret_cast<char*>(&_impl_.actual_speed_),
          reinterpret_cast<char*>(&other->_impl_.actual_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[15]);
}

// ===================================================================

class CreatCharacterRes::_Internal {
 public:
};

CreatCharacterRes::CreatCharacterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.CreatCharacterRes)
}
CreatCharacterRes::CreatCharacterRes(const CreatCharacterRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatCharacterRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.act_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_success_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.act_success_));
  // @@protoc_insertion_point(copy_constructor:protobuf.CreatCharacterRes)
}

inline void CreatCharacterRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.act_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreatCharacterRes::~CreatCharacterRes() {
  // @@protoc_insertion_point(destructor:protobuf.CreatCharacterRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatCharacterRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreatCharacterRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatCharacterRes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.CreatCharacterRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.act_success_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.act_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatCharacterRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool act_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatCharacterRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.CreatCharacterRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool act_success = 1;
  if (this->_internal_act_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_act_success(), target);
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.CreatCharacterRes)
  return target;
}

size_t CreatCharacterRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.CreatCharacterRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // bool act_success = 1;
  if (this->_internal_act_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatCharacterRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatCharacterRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatCharacterRes::GetClassData() const { return &_class_data_; }


void CreatCharacterRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatCharacterRes*>(&to_msg);
  auto& from = static_cast<const CreatCharacterRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.CreatCharacterRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_act_success() != 0) {
    _this->_internal_set_act_success(from._internal_act_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatCharacterRes::CopyFrom(const CreatCharacterRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.CreatCharacterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatCharacterRes::IsInitialized() const {
  return true;
}

void CreatCharacterRes::InternalSwap(CreatCharacterRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatCharacterRes, _impl_.act_success_)
      + sizeof(CreatCharacterRes::_impl_.act_success_)
      - PROTOBUF_FIELD_OFFSET(CreatCharacterRes, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatCharacterRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[16]);
}

// ===================================================================

class BoolRes::_Internal {
 public:
};

BoolRes::BoolRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.BoolRes)
}
BoolRes::BoolRes(const BoolRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoolRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.act_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.act_success_ = from._impl_.act_success_;
  // @@protoc_insertion_point(copy_constructor:protobuf.BoolRes)
}

inline void BoolRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.act_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoolRes::~BoolRes() {
  // @@protoc_insertion_point(destructor:protobuf.BoolRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoolRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoolRes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.BoolRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.act_success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool act_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.BoolRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool act_success = 1;
  if (this->_internal_act_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_act_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.BoolRes)
  return target;
}

size_t BoolRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.BoolRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool act_success = 1;
  if (this->_internal_act_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoolRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolRes::GetClassData() const { return &_class_data_; }


void BoolRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoolRes*>(&to_msg);
  auto& from = static_cast<const BoolRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.BoolRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_act_success() != 0) {
    _this->_internal_set_act_success(from._internal_act_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolRes::CopyFrom(const BoolRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.BoolRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolRes::IsInitialized() const {
  return true;
}

void BoolRes::InternalSwap(BoolRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.act_success_, other->_impl_.act_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[17]);
}

// ===================================================================

class CharacterInfoRes::_Internal {
 public:
};

CharacterInfoRes::CharacterInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.CharacterInfoRes)
}
CharacterInfoRes::CharacterInfoRes(const CharacterInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterInfoRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_info_){from._impl_.character_info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.CharacterInfoRes)
}

inline void CharacterInfoRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CharacterInfoRes::~CharacterInfoRes() {
  // @@protoc_insertion_point(destructor:protobuf.CharacterInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.character_info_.~RepeatedPtrField();
}

void CharacterInfoRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.CharacterInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf.MessageOfCharacter Character_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_character_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.CharacterInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.MessageOfCharacter Character_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_character_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_character_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.CharacterInfoRes)
  return target;
}

size_t CharacterInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.CharacterInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.MessageOfCharacter Character_info = 1;
  total_size += 1UL * this->_internal_character_info_size();
  for (const auto& msg : this->_impl_.character_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterInfoRes::GetClassData() const { return &_class_data_; }


void CharacterInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterInfoRes*>(&to_msg);
  auto& from = static_cast<const CharacterInfoRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.CharacterInfoRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.character_info_.MergeFrom(from._impl_.character_info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterInfoRes::CopyFrom(const CharacterInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.CharacterInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfoRes::IsInitialized() const {
  return true;
}

void CharacterInfoRes::InternalSwap(CharacterInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.character_info_.InternalSwap(&other->_impl_.character_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[18]);
}

// ===================================================================

class EcoRes::_Internal {
 public:
};

EcoRes::EcoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.EcoRes)
}
EcoRes::EcoRes(const EcoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EcoRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.economy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.economy_ = from._impl_.economy_;
  // @@protoc_insertion_point(copy_constructor:protobuf.EcoRes)
}

inline void EcoRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.economy_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EcoRes::~EcoRes() {
  // @@protoc_insertion_point(destructor:protobuf.EcoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EcoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EcoRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EcoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.EcoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.economy_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EcoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 economy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.economy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EcoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.EcoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 economy = 1;
  if (this->_internal_economy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_economy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.EcoRes)
  return target;
}

size_t EcoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.EcoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 economy = 1;
  if (this->_internal_economy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_economy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EcoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EcoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EcoRes::GetClassData() const { return &_class_data_; }


void EcoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EcoRes*>(&to_msg);
  auto& from = static_cast<const EcoRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.EcoRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_economy() != 0) {
    _this->_internal_set_economy(from._internal_economy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EcoRes::CopyFrom(const EcoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.EcoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcoRes::IsInitialized() const {
  return true;
}

void EcoRes::InternalSwap(EcoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.economy_, other->_impl_.economy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EcoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[19]);
}

// ===================================================================

class MessageOfNews::_Internal {
 public:
};

MessageOfNews::MessageOfNews(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfNews)
}
MessageOfNews::MessageOfNews(const MessageOfNews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOfNews* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_id_){}
    , decltype(_impl_.to_id_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.news_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_id_, &from._impl_.from_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.from_id_)) + sizeof(_impl_.team_id_));
  clear_has_news();
  switch (from.news_case()) {
    case kTextMessage: {
      _this->_internal_set_text_message(from._internal_text_message());
      break;
    }
    case kBinaryMessage: {
      _this->_internal_set_binary_message(from._internal_binary_message());
      break;
    }
    case NEWS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfNews)
}

inline void MessageOfNews::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_id_){int64_t{0}}
    , decltype(_impl_.to_id_){int64_t{0}}
    , decltype(_impl_.team_id_){int64_t{0}}
    , decltype(_impl_.news_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_news();
}

MessageOfNews::~MessageOfNews() {
  // @@protoc_insertion_point(destructor:protobuf.MessageOfNews)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOfNews::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_news()) {
    clear_news();
  }
}

void MessageOfNews::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOfNews::clear_news() {
// @@protoc_insertion_point(one_of_clear_start:protobuf.MessageOfNews)
  switch (news_case()) {
    case kTextMessage: {
      _impl_.news_.text_message_.Destroy();
      break;
    }
    case kBinaryMessage: {
      _impl_.news_.binary_message_.Destroy();
      break;
    }
    case NEWS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NEWS_NOT_SET;
}


void MessageOfNews::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MessageOfNews)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.team_id_) -
      reinterpret_cast<char*>(&_impl_.from_id_)) + sizeof(_impl_.team_id_));
  clear_news();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOfNews::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf.MessageOfNews.text_message"));
        } else
          goto handle_unusual;
        continue;
      // bytes binary_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_binary_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 from_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 to_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOfNews::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfNews)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text_message = 1;
  if (_internal_has_text_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_message().data(), static_cast<int>(this->_internal_text_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.MessageOfNews.text_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text_message(), target);
  }

  // bytes binary_message = 2;
  if (_internal_has_binary_message()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_binary_message(), target);
  }

  // int64 from_id = 3;
  if (this->_internal_from_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_from_id(), target);
  }

  // int64 to_id = 4;
  if (this->_internal_to_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_to_id(), target);
  }

  // int64 team_id = 5;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfNews)
  return target;
}

size_t MessageOfNews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfNews)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from_id = 3;
  if (this->_internal_from_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_from_id());
  }

  // int64 to_id = 4;
  if (this->_internal_to_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_to_id());
  }

  // int64 team_id = 5;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
  }

  switch (news_case()) {
    // string text_message = 1;
    case kTextMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_message());
      break;
    }
    // bytes binary_message = 2;
    case kBinaryMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_message());
      break;
    }
    case NEWS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfNews::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOfNews::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOfNews::GetClassData() const { return &_class_data_; }


void MessageOfNews::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOfNews*>(&to_msg);
  auto& from = static_cast<const MessageOfNews&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfNews)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_id() != 0) {
    _this->_internal_set_from_id(from._internal_from_id());
  }
  if (from._internal_to_id() != 0) {
    _this->_internal_set_to_id(from._internal_to_id());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  switch (from.news_case()) {
    case kTextMessage: {
      _this->_internal_set_text_message(from._internal_text_message());
      break;
    }
    case kBinaryMessage: {
      _this->_internal_set_binary_message(from._internal_binary_message());
      break;
    }
    case NEWS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOfNews::CopyFrom(const MessageOfNews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfNews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOfNews::IsInitialized() const {
  return true;
}

void MessageOfNews::InternalSwap(MessageOfNews* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOfNews, _impl_.team_id_)
      + sizeof(MessageOfNews::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(MessageOfNews, _impl_.from_id_)>(
          reinterpret_cast<char*>(&_impl_.from_id_),
          reinterpret_cast<char*>(&other->_impl_.from_id_));
  swap(_impl_.news_, other->_impl_.news_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOfNews::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once,
      file_level_metadata_Message2Clients_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfMonkeySkill*
Arena::CreateMaybeMessage< ::protobuf::MessageOfMonkeySkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfMonkeySkill >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfCharacter*
Arena::CreateMaybeMessage< ::protobuf::MessageOfCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfBarracks*
Arena::CreateMaybeMessage< ::protobuf::MessageOfBarracks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfBarracks >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfSpring*
Arena::CreateMaybeMessage< ::protobuf::MessageOfSpring >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfSpring >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfFarm*
Arena::CreateMaybeMessage< ::protobuf::MessageOfFarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfFarm >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfTrap*
Arena::CreateMaybeMessage< ::protobuf::MessageOfTrap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfTrap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfEconomyResource*
Arena::CreateMaybeMessage< ::protobuf::MessageOfEconomyResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfEconomyResource >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfAdditionResource*
Arena::CreateMaybeMessage< ::protobuf::MessageOfAdditionResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfAdditionResource >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfConstruction*
Arena::CreateMaybeMessage< ::protobuf::MessageOfConstruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfConstruction >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfMap_Row*
Arena::CreateMaybeMessage< ::protobuf::MessageOfMap_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfMap_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfMap*
Arena::CreateMaybeMessage< ::protobuf::MessageOfMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfTeam*
Arena::CreateMaybeMessage< ::protobuf::MessageOfTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfObj*
Arena::CreateMaybeMessage< ::protobuf::MessageOfObj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfObj >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfAll*
Arena::CreateMaybeMessage< ::protobuf::MessageOfAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfAll >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageToClient*
Arena::CreateMaybeMessage< ::protobuf::MessageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MoveRes*
Arena::CreateMaybeMessage< ::protobuf::MoveRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MoveRes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::CreatCharacterRes*
Arena::CreateMaybeMessage< ::protobuf::CreatCharacterRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::CreatCharacterRes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::BoolRes*
Arena::CreateMaybeMessage< ::protobuf::BoolRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::BoolRes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::CharacterInfoRes*
Arena::CreateMaybeMessage< ::protobuf::CharacterInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::CharacterInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::EcoRes*
Arena::CreateMaybeMessage< ::protobuf::EcoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::EcoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::MessageOfNews*
Arena::CreateMaybeMessage< ::protobuf::MessageOfNews >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MessageOfNews >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
